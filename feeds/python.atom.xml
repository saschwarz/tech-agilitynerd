<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tech.agilitynerd</title><link href="http://tech.agilitynerd.com/" rel="alternate"></link><link href="http://127.0.0.1:8000/feeds/python.atom.xml" rel="self"></link><id>http://tech.agilitynerd.com/</id><updated>2012-05-12T23:57:00-05:00</updated><entry><title>My Favorite ORM and Python Anti-Patterns</title><link href="http://tech.agilitynerd.com/my-favorite-orm-anti-pattern.html" rel="alternate"></link><published>2012-05-12T23:57:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2012-05-12:my-favorite-orm-anti-pattern.html</id><summary type="html">&lt;p&gt;At work I was looking at improving the performance of one of our slower
web pages. It can be rewarding to find a little piece of code that can
be easily optimized. This time there were several functions that were
adding 10+ sec to the page in worst case. It wasn't a problem for most
clients, but when clients with who are related to many other clients hit
the page they'd experience terrible performance. Here's pseudo code for
the combination of anti-patterns that caused the problem:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Projects have users and users are in different organizations
# (project can contain multiple organization's users)
activeOrganizationProjectUsers = [x for x in project.users
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if x.active and x.organization == organization]
if activeOrganizationProjectUsers:
&amp;nbsp;&amp;nbsp;&amp;nbsp; # do something *NOT* using activeOrganizationProjectUsers
&lt;/pre&gt;
&lt;p&gt;There are two main problems with this code:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It ignores the fact the project, users, and organization are backed
by an ORM&lt;/li&gt;
&lt;li&gt;The list comprehension is being used to find all matching elements
when only a single element is needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="ignoring-the-orm"&gt;
&lt;h2&gt;Ignoring the ORM&lt;/h2&gt;
&lt;p&gt;The code above wouldn't be too bad if these were just lists of objects
in memory. But being objects that are instantiated by an ORM a number of
database queries will be issued. In this particular case (w/o eager
loading across user to the organization table) the following queries
were executed:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Join project to user and get all users for the project's id&lt;/li&gt;
&lt;li&gt;For each user load their organization (one by one) if the user is
active&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So in the case where there were hundreds of users on a project there
were hundreds of queries executed and hundreds of User and Organization
instances were instantiated. Depending on the size of the objects (and
the ORM's behavior) it can take &amp;quot;real time&amp;quot; to fetch and instantiate all
these large objects.&lt;/p&gt;
&lt;p&gt;This code base has this kind of code sprinkled through out it. At one
time during it's development the developers were encouraged to treat ORM
backed objects as though they were Plain Old Python Objects (POPOs). The
developer wouldn't necessarily see the performance degradation using
small data sets either. This is one of the reasons why I like to tail
the database log (or use &lt;a class="reference external" href="http://github.com/robhudson/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt; if I'm using Django)
to see the queries go by.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-list-comprehensions-when-a-single-value-is-needed"&gt;
&lt;h2&gt;Using List Comprehensions When a Single Value is Needed&lt;/h2&gt;
&lt;p&gt;To make this situation worse, the activeOrganizationProjectUsers list
wasn't actually used. This is a combination of a Python anti-pattern and
the ORM anti-pattern. What was required was to determine if a single
active organization user existed.&lt;/p&gt;
&lt;p&gt;I believe the original developer(s) used the list comprehension solution
in a combination of ignorance and syntactic sugar. They didn't want to
write a new function to do the query and put it in the User class so
they used the existing class's API. The syntactic sugar was using the
list comprehension to get more values than the one that was needed. If
this wasn't a (potentially) expensive ORM backed operation the original
code could have been:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
activeOrganizationProjectUsers = False
for x in project.users:
&amp;nbsp;&amp;nbsp;&amp;nbsp; if x.active and x.organization == organization:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; activeOrganizationProjectUsers = True
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break
if activeOrganizationProjectUsers:
&amp;nbsp;&amp;nbsp;&amp;nbsp; # do something
&lt;/pre&gt;
&lt;p&gt;But this solution could still query all possible user/organization
combinations. The other question would be: which set is larger the
organization users or the project users? It is likely looping over the
organization's users looking for active ones would be more efficient
anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remember-the-underlying-representation"&gt;
&lt;h2&gt;Remember the Underlying Representation&lt;/h2&gt;
&lt;p&gt;When performance matters remembering the objects are ORM backed is
important. So in this case a single query was all that was required
(SqlObject pseudo syntax):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
activeOrganizationProjectUsers = Users.selectBy(project=project,
                     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; active=True,
                     &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; organization=organization).count() &amp;gt; 0
&lt;/pre&gt;
&lt;p&gt;If abstracting out the ORM's methods is important this new function
could be added to the appropriate class as a method. In my case making a
change to use a query resulted in cutting the page load time by two
orders of magnitude.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="antipattern"></category><category term="development"></category><category term="orm"></category><category term="python"></category></entry><entry><title>Adding pyrsvg to a virtualenv created with --no-site-packages</title><link href="http://tech.agilitynerd.com/adding-rsvg-to-a-virtualenv-created-with-no-s.html" rel="alternate"></link><published>2010-10-12T03:02:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-10-12:adding-rsvg-to-a-virtualenv-created-with-no-s.html</id><summary type="html">&lt;p&gt;I set up my development and deployment environments on Ubuntu with
&lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--no-site-packages&lt;/span&gt;&lt;/tt&gt; option to isolate them from
packages in the system installation. My application uses &lt;a class="reference external" href="http://cairographics.org/pyrsvg/"&gt;pyrsvg&lt;/a&gt; and
it is installed by default as a system package. Consequently I had to
link the shared libraries it installs (w/in gtk) into my virtualenv.&lt;/p&gt;
&lt;p&gt;Here are the links I created (&lt;tt class="docutils literal"&gt;workon&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;cdsitepackages&lt;/tt&gt; are
&lt;a class="reference external" href="http://www.doughellmann.com/projects/virtualenvwrapper/"&gt;virtualenvwrapper&lt;/a&gt; shell aliases):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ workon project
$ cdsitepackages
$ ln -s /var/lib/python-support/python2.6/gtk-2.0/rsvg.so .
$ ln -s /var/lib/python-support/python2.6/gtk-2.0/gobject .
$ ln -s /var/lib/python-support/python2.6/gtk-2.0/glib .
&lt;/pre&gt;
</summary><category term="python"></category><category term="rsvg"></category><category term="virtualenv"></category></entry><entry><title>Mobile Web Site Redirects in Django</title><link href="http://tech.agilitynerd.com/conditional-mobile-web-site-redirect-in-djang.html" rel="alternate"></link><published>2010-10-05T14:34:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-10-05:conditional-mobile-web-site-redirect-in-djang.html</id><summary type="html">&lt;p&gt;For the mobile version of agilitycourses.com I wanted to follow the
approach Google appears to be using on some of its sites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the user views agilitycourses.com from a desktop browser they
should see the standard/desktop version of the site.&lt;/li&gt;
&lt;li&gt;If the user views agilitycourses.com from a mobile browser they
should be redirected to a mobile domain (m.agilitycourses.com).&lt;/li&gt;
&lt;li&gt;The mobile version of the website includes a link to the standard
version.&lt;/li&gt;
&lt;li&gt;If the mobile user chooses the standard website they should &amp;quot;stick&amp;quot;
on that site and not be redirected to the mobile site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to run two different websites but share templates and have the
templates and css change for the mobile site. That meant that I'd need
to set a variable(s) in the request to use to generate the appropriate
HTML. So I found the simplest mobile device detector &lt;a class="reference external" href="http://code.google.com/p/minidetector/"&gt;minidetector&lt;/a&gt; and
initially used that. I later found &lt;a class="reference external" href="http://github.com/shelfworthy/minidetector"&gt;Chris Drackett's fork&lt;/a&gt; has a number
of useful enhancements and switched to it.&lt;/p&gt;
&lt;p&gt;But minidetector didn't provide the ability to redirect to another site.
I found &lt;a class="reference external" href="http://www.packtpub.com/article/multiple-templates-in-django"&gt;Scott Newman's article&lt;/a&gt; on using multiple templates which had
a section on performing the redirect and storing the user's selection in
the session. So I forked Chris' minidetector and modified it to include
the redirect and session storage. At the same time I decided to store
all the minidetector variables into the session and add them, via
middleware, to the request so the raw request wouldn't have to be parsed
each time. My fork is &lt;a class="reference external" href="http://github.com/saschwarz/minidetector"&gt;available here&lt;/a&gt; with details on the new
configuration options.&lt;/p&gt;
&lt;p&gt;I'm using two domains so I can track analytics for the mobile and
non-mobile sites separately and allow users to bookmark the desired
site's pages. I use Google Analytics (via django-google-analytics) and
Awstats for analytics.&lt;/p&gt;
&lt;p&gt;Since I'm using two separate domain and sharing everything else I'm
using a setup similar to the one described by &lt;a class="reference external" href="http://www.nerdydork.com/mobile-app-on-subdomain-with-django.html"&gt;Dustin Davis&lt;/a&gt;. I have a
settings.py file and a mobile_settings.py that only overrides the
features I need:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from settings import *
SITE_ID = 2
CACHE_MIDDLEWARE_KEY_PREFIX = &amp;quot;m.ac-&amp;quot;
&lt;/pre&gt;
&lt;p&gt;I use a different memcached key prefix so the cached pages for the
mobile site don't clash with those for the desktop site.&lt;/p&gt;
&lt;p&gt;I setup m.agilitycourses on my server using the same &lt;a class="reference external" href="http://tech.agilitynerd.com/configuring-runit-for-gunicorn-and-django-ins"&gt;Gunicorn setup I
used for agilitycourses.com&lt;/a&gt; with the only changes being specifying the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--bind&lt;/span&gt; address/port&lt;/tt&gt; and the name of the mobile settings file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh
GUNICORN=/home/user/virtualenvs/myapp/bin/gunicorn_django
ROOT=/home/user/source/myapp
PID=/var/run/myapp.pid
if [ -f $PID ]
&amp;nbsp;&amp;nbsp;&amp;nbsp; then rm $PID fi
cd $ROOT
exec $GUNICORN --bind 127.0.0.1:8001 -c $ROOT/gunicorn.conf.py --pid=$PID $ROOT/mobile_settings.py
&lt;/pre&gt;
&lt;p&gt;If my templates/content start to diverge more significantly between the
mobile and desktop sites I may set the TEMPLATE_DIRS differently in the
mobile_settings file. Or I can move to Dustin's approach and create a
new application containing the urls.py and views.py specific to my
mobile deployment. I would think diverging further would call for a
refactoring of the common functionality to its own application which
could be imported into separate code branches for each domain.&lt;/p&gt;
</summary><category term="django"></category><category term="gunicorn"></category><category term="minidetector"></category><category term="mobile"></category></entry><entry><title>Configuring Runit for Gunicorn and Django Installed in a Virtualenv on Ubuntu</title><link href="http://tech.agilitynerd.com/configuring-runit-for-gunicorn-and-django-ins.html" rel="alternate"></link><published>2010-09-08T03:08:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-09-08:configuring-runit-for-gunicorn-and-django-ins.html</id><summary type="html">&lt;p&gt;I couldn't find any documentation that covered all the pieces for
configuring my latest Django site so I hope this helps someone else out.&lt;/p&gt;
&lt;p&gt;I had used &lt;tt class="docutils literal"&gt;mod_wsgi&lt;/tt&gt; under Apache for my other Django sites. But now I'm
using different python versions for the sites (until if/when I update
the older sites) and I wasn't getting the correct versions of some
python libraries (even though virtualenv apeared to be putting the
appropriate python packages at the start of the sys.path). So I decided
to configure Apache to ProxyPass to &lt;a class="reference external" href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; so I could run my
Django app in its virtualenv without it getting any other python
modules.&lt;/p&gt;
&lt;div class="section" id="installing-gunicorn"&gt;
&lt;h2&gt;Installing Gunicorn&lt;/h2&gt;
&lt;p&gt;I installed Gunicorn into the virtualenv for my application, which
simplifies using gunicorn from the command line. Assuming
&lt;tt class="docutils literal"&gt;/home/user/virtualenvs/myapp&lt;/tt&gt; is the location of the virtualenv:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ source /home/user/virtualenvs/myapp/bin/activate
$ pip install gunicorn

# or
$ easy_install gunicorn
&lt;/pre&gt;
&lt;p&gt;This copies &lt;tt class="docutils literal"&gt;gunicorn_django&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;/home/user/virtualenvs/myapp/bin&lt;/tt&gt;
directory. Test gunicorn with your app, assuming your Django app is
located at &lt;tt class="docutils literal"&gt;/home/user/source/myapp&lt;/tt&gt;, as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ source /home/user/virtualenvs/myapp/bin/activate
(myapp)$ cd /home/user/source/myapp
(myapp)$ gunicorn_django
&lt;/pre&gt;
&lt;p&gt;Gunicorn starts myapp using the &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; file in the current
directory on &lt;tt class="docutils literal"&gt;127.0.0.1:8000&lt;/tt&gt;. Ctrl-C to stop the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-runit-on-ubuntu"&gt;
&lt;h2&gt;Installing Runit on Ubuntu&lt;/h2&gt;
&lt;p&gt;There are two &lt;a class="reference external" href="http://smarden.org/runit/index.html"&gt;runit&lt;/a&gt; packages. You want the one that only runs
services you add to it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo apt-get install runit
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
&amp;nbsp; runit-run socklog-run
The following NEW packages will be installed:
&amp;nbsp; runit0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 0B/113kB of archives.After this operation, 537kB of additional disk space will be used.
Selecting previously deselected package runit.
(Reading database ... 209845 files and directories currently installed.)
Unpacking runit (from .../runit_2.0.0-1ubuntu2_i386.deb) ...
Processing triggers for man-db ...
Setting up runit (2.0.0-1ubuntu2) ...
runsvdir (start) waiting
runsvdir (start) startingrunsvdir (start) pre-start
runsvdir (start) spawned, process 9575
runsvdir (start) post-start, (main) process 9575
runsvdir (start) running, process 9575
&lt;/pre&gt;
&lt;p&gt;You'll want to create a directory for the application and a run script
in &lt;tt class="docutils literal"&gt;/etc/service:&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo mkdir /etc/service/myapp
$ sudo vi /etc/service/myapp/run
# enter the run script I'll show below
$ sudo chmod +x /etc/service/myapp/run
# stop runit from trying to run gunicorn until we are ready
$ sudo sv stop myapp
ok: down: myapp: 0s, normally up
&lt;/pre&gt;
&lt;p&gt;The example run script checked into Gunicorn had some syntax errors
and wasn't quite what I wanted. Here's my version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/bin/sh
GUNICORN=/home/user/virtualenvs/myapp/bin/gunicorn_django
ROOT=/home/user/source/myapp
PID=/var/run/myapp.pid

if [ -f $PID ]
&amp;nbsp;&amp;nbsp;&amp;nbsp; then rm $PID
fi

cd $ROOT
exec $GUNICORN -c $ROOT/gunicorn.conf.py --pid=$PID
&lt;/pre&gt;
&lt;p&gt;You can create a &lt;a class="reference external" href="http://gunicorn.org/configure.html"&gt;configuration file for gunicorn&lt;/a&gt; to use or just
create an empty file for now:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ touch /home/user/source/myapp/gunicorn.conf.py
&lt;/pre&gt;
&lt;p&gt;If you have multiple appserver you'll need to run gunicorn on
different ports, you can put the configuration in the gunicorn.conf.py
file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind = &amp;quot;127.0.0.1:8111&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-it-together"&gt;
&lt;h2&gt;Putting it Together&lt;/h2&gt;
&lt;p&gt;Now you can test that the run script works when run as root:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo /etc/service/myapp/run
&lt;/pre&gt;
&lt;p&gt;Gunicorn should start and start the appserver. If it fails you can
debug the script via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo bash -x /etc/service/myapp/run
&lt;/pre&gt;
&lt;p&gt;Tell runit to start and keep gunicorn running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo sv start myapp
ok: run: myapp: (pid 7540) 0s
$ sudo sv status myapp
run: myapp: (pid 7540) 1s
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="apache"></category><category term="django"></category><category term="gunicorn"></category><category term="runit"></category><category term="ubuntu"></category><category term="virtualenv"></category></entry><entry><title>Initial Release of django-stw</title><link href="http://tech.agilitynerd.com/initial-release-of-django-stw.html" rel="alternate"></link><published>2010-07-11T15:47:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-07-11:initial-release-of-django-stw.html</id><summary type="html">&lt;p&gt;I have been using the free website thumbnail service from &lt;a class="reference external" href="http://www.shrinktheweb.com?a=988"&gt;Shrink The
Web&lt;/a&gt; on my dog agility search website &lt;a class="reference external" href="http://googility.com"&gt;Googility&lt;/a&gt; since I launched it.
It is quick and easy to use and it adds a lot to the look of the pages.&lt;/p&gt;
&lt;p&gt;I had created a simple &lt;a class="reference external" href="http://djangoproject.com/"&gt;Django&lt;/a&gt; template tag for inserting the little
snippet of HTML needed by their service.&lt;/p&gt;
&lt;p&gt;Recently they asked me to add support for their advanced features to my
template tag. I used this opportunity to convert my templatetag to a
Django application. This mostly makes it a lot easier to install but it
also let me to bundle tests and an example template with the template
tag.&lt;/p&gt;
&lt;p&gt;I kept the existing &lt;tt class="docutils literal"&gt;shrinkthewebimage&lt;/tt&gt; template tag and added a new
tag called &lt;tt class="docutils literal"&gt;stwimage&lt;/tt&gt; to enable the new features.&lt;/p&gt;
&lt;p&gt;I'm hosting the example page included in the package &lt;a class="reference external" href="http://googility.com/django-stw/"&gt;here&lt;/a&gt; so you can
see how the template tags work.&lt;/p&gt;
&lt;p&gt;I've hosted the &lt;a class="reference external" href="http://github.com/saschwarz/django-stw"&gt;project source on github&lt;/a&gt; and uploaded the &lt;a class="reference external" href="http://pypi.python.org/pypi/django-stw/"&gt;initial
release to the CheeseShop&lt;/a&gt; for easy installation.&lt;/p&gt;
</summary><category term="django"></category><category term="github"></category><category term="googility"></category><category term="pypi"></category><category term="python"></category><category term="shrinktheweb"></category><category term="webdevelopment"></category></entry></feed>