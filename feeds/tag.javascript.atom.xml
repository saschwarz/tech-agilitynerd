<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tech.agilitynerd - javascript</title><link href="http://tech.agilitynerd.com/" rel="alternate"></link><link href="http://127.0.0.1:8000/feeds/tag.javascript.atom.xml" rel="self"></link><id>http://tech.agilitynerd.com/</id><updated>2016-12-14T14:00:00-06:00</updated><entry><title>Using Gestures in Angular 2 with TypeScript Lightning Talk</title><link href="http://tech.agilitynerd.com/using-gestures-in-angular-2-with-typescript-lightning-talk.html" rel="alternate"></link><published>2016-12-14T14:00:00-06:00</published><updated>2016-12-14T14:00:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-12-14:/using-gestures-in-angular-2-with-typescript-lightning-talk.html</id><summary type="html">&lt;p&gt;Here are my &lt;a class="reference external" href="https://saschwarz.github.io/angular2-gestures-slides/#/"&gt;slides on Using Gestures in Angular 2 with TypeScript&lt;/a&gt;
for a lightning talk that I gave at the December &lt;a class="reference external" href="https://www.meetup.com/Northwest-Chicago-JavaScript/"&gt;Northwest Chicago JavaScript&lt;/a&gt; meetup.&lt;/p&gt;
&lt;div class="thumbnail figure"&gt;
&lt;img alt="Screenshot of first slide of my presentation" src="{filename}/images/GesturesAngularTypeScriptSlides.png" /&gt;
&lt;/div&gt;
&lt;p&gt;I converted the &lt;a class="reference external" href="http://lab.hakim.se/reveal-js/#/"&gt;Reveal.js&lt;/a&gt; slides checkout to use the
&lt;a class="reference external" href="https://cli.angular.io/"&gt;Angular 2 CLI&lt;/a&gt;. That let me include two small Angular 2 components within the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are my &lt;a class="reference external" href="https://saschwarz.github.io/angular2-gestures-slides/#/"&gt;slides on Using Gestures in Angular 2 with TypeScript&lt;/a&gt;
for a lightning talk that I gave at the December &lt;a class="reference external" href="https://www.meetup.com/Northwest-Chicago-JavaScript/"&gt;Northwest Chicago JavaScript&lt;/a&gt; meetup.&lt;/p&gt;
&lt;div class="thumbnail figure"&gt;
&lt;img alt="Screenshot of first slide of my presentation" src="{filename}/images/GesturesAngularTypeScriptSlides.png" /&gt;
&lt;/div&gt;
&lt;p&gt;I converted the &lt;a class="reference external" href="http://lab.hakim.se/reveal-js/#/"&gt;Reveal.js&lt;/a&gt; slides checkout to use the
&lt;a class="reference external" href="https://cli.angular.io/"&gt;Angular 2 CLI&lt;/a&gt;. That let me include two small Angular 2 components within the slides themselves.
Which also allowed me to demonstrate using the &lt;tt class="docutils literal"&gt;pan&lt;/tt&gt; gesture without leaving the presentation. The Angular CLI also made it easy to
generate and publish the presentation to the GitHub pages associated with the slides via &lt;tt class="docutils literal"&gt;ng &lt;span class="pre"&gt;github-pages:deploy&lt;/span&gt;&lt;/tt&gt;.
Here's the &lt;a class="reference external" href="https://github.com/saschwarz/angular2-gestures-slides"&gt;source code for the slides/components&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have more examples of using gestures in the larger demo app I showed at the beginning of the talk:
&lt;a class="reference external" href="https://github.com/saschwarz/angular2-image-crop"&gt;Angular 2 TypeScript Virtual Image Cropping repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the video of my presentation:&lt;/p&gt;
&lt;div class="embed-video"&gt;
    &lt;iframe src="https://www.youtube.com/embed/Je2r1pawZ3M" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><category term="angular"></category><category term="typescript"></category><category term="talks"></category><category term="gestures"></category><category term="javascript"></category><category term="video"></category></entry><entry><title>Maximize and Minimize Code Blocks in Reveal.js Slide Shows</title><link href="http://tech.agilitynerd.com/maximize-and-minimize-code-blocks-in-revealjs-slide-shows.html" rel="alternate"></link><published>2016-12-04T12:00:00-06:00</published><updated>2016-12-04T12:00:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-12-04:/maximize-and-minimize-code-blocks-in-revealjs-slide-shows.html</id><summary type="html">&lt;p&gt;I was working on a slideshow about &lt;a class="reference external" href="https://saschwarz.github.io/angular2-gestures-slides/#/"&gt;Using Gestures in Angular 2 Components&lt;/a&gt;
for a lightning talk at the December &lt;a class="reference external" href="https://www.meetup.com/Northwest-Chicago-JavaScript/"&gt;Northwest Chicago JavaScript&lt;/a&gt; meetup and
I found the code sections just weren't large enough. So I threw together a little JavaScript to add &amp;quot;+&amp;quot; and &amp;quot;-&amp;quot;
buttons next to each code section …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was working on a slideshow about &lt;a class="reference external" href="https://saschwarz.github.io/angular2-gestures-slides/#/"&gt;Using Gestures in Angular 2 Components&lt;/a&gt;
for a lightning talk at the December &lt;a class="reference external" href="https://www.meetup.com/Northwest-Chicago-JavaScript/"&gt;Northwest Chicago JavaScript&lt;/a&gt; meetup and
I found the code sections just weren't large enough. So I threw together a little JavaScript to add &amp;quot;+&amp;quot; and &amp;quot;-&amp;quot;
buttons next to each code section that maximizes/restores the code blocks for easier viewing during the presentation:&lt;/p&gt;
&lt;div class="thumbnail figure"&gt;
&lt;img alt="Screenshot of slide showing plus sign to right of code section" src="{filename}/images/max-min-screenshot.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Just copy/paste the following into your &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt; file:&lt;/p&gt;
&lt;script src="https://gist.github.com/saschwarz/ee02786cd1a64c33611fafd70c0df900.js"&gt;&lt;/script&gt;</content><category term="webdev"></category><category term="CSS"></category><category term="JavaScript"></category></entry><entry><title>Pelican For Fast Site/Project Development</title><link href="http://tech.agilitynerd.com/pelican-for-fast-siteproject-development.html" rel="alternate"></link><published>2016-11-08T13:00:00-06:00</published><updated>2016-11-08T13:00:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-11-08:/pelican-for-fast-siteproject-development.html</id><summary type="html">&lt;p&gt;I was working on a simple single page website for &lt;a class="reference external" href="http://www.agilitynerd.com/jumpheights/"&gt;calculating dog agility jump heights&lt;/a&gt; and was really missing the tool chain I normally use in Flask and Django web sites for bundling, compressing, and versioning CSS and JS files and a mechanism for putting the bundled/versioned file names …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was working on a simple single page website for &lt;a class="reference external" href="http://www.agilitynerd.com/jumpheights/"&gt;calculating dog agility jump heights&lt;/a&gt; and was really missing the tool chain I normally use in Flask and Django web sites for bundling, compressing, and versioning CSS and JS files and a mechanism for putting the bundled/versioned file names in the HTML files. I was searching for what I needed and was about to write a little script to do it and then it occurred to me that &lt;a class="reference external" href="http://getpelican.com"&gt;Pelican&lt;/a&gt; already has just what I needed!&lt;/p&gt;
&lt;p&gt;Pelican is known for making static generation of blogs easy. But it also has a lot of powerful features that can be easily leveraged to create small web sites and web sites for projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://webassets.readthedocs.io/en/latest/"&gt;webassets&lt;/a&gt; integration to SASS/LESS, minify, bundle, and version CSS and JavaScript. It automatically inserts versioned bundled names in the HTML.&lt;/li&gt;
&lt;li&gt;Dozens of &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;themes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Themes are implemented using &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2 templates&lt;/a&gt; and allow sharing page layouts across your project's pages. You can also have custom templates per page.&lt;/li&gt;
&lt;li&gt;Theme templates already contain useful integrations which can be used in you templates:&lt;ul&gt;
&lt;li&gt;Navigation&lt;/li&gt;
&lt;li&gt;Analytics&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dozens of &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;Pelican plugins&lt;/a&gt; can be installed to add new features.&lt;/li&gt;
&lt;li&gt;During development regeneration of files is automatic when you save files.&lt;/li&gt;
&lt;li&gt;Many deployment options are also available:&lt;ul&gt;
&lt;li&gt;GitHub pages&lt;/li&gt;
&lt;li&gt;FTP/SSH to your own server&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;S3&lt;/li&gt;
&lt;li&gt;Rackspace Cloud Files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I've written a lot of detail on every step but it is actually very easy to use Pelican for non-blog web sites. Here's how it works:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a virtualenv and install Pelican and webassets Python packages (I use the same venv for all my Pelican projects).&lt;/li&gt;
&lt;li&gt;Checkout pelican-plugins.&lt;/li&gt;
&lt;li&gt;Edit the Pelican theme's &lt;tt class="docutils literal"&gt;base.html&lt;/tt&gt; Jinja template to include the CSS and JavaScript files you need.&lt;/li&gt;
&lt;li&gt;Create your pages' body content in files in &lt;tt class="docutils literal"&gt;content/pages&lt;/tt&gt; in HTML, Markdown or reStructuredText.&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;make devserver&lt;/tt&gt; and refresh your browser to see your changes or use this &lt;a class="reference external" href="http://tech.agilitynerd.com/livereload-with-pelican.html"&gt;LiveReload script&lt;/a&gt; to automatically reload your browser. Repeat steps 3 and 4 until you are done.&lt;/li&gt;
&lt;li&gt;Deploy to GitHub Pages: &lt;tt class="docutils literal"&gt;make github&lt;/tt&gt;. Or deploy to your own server.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-the-environment"&gt;
&lt;h2&gt;Setup the Environment&lt;/h2&gt;
&lt;p&gt;Install and configure Pelican for creating non-blog web sites:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a virtualenv and install pelican, webassets, cssmin, and jsmin (or any other &lt;a class="reference external" href="http://webassets.readthedocs.io/en/latest/builtin_filters.html"&gt;CSS/JS filters supported by webassets&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv ~/virtualenvs/pelican
source ~/virtualenvs/pelican/bin/activate
pip install pelican webassets cssmin jsmin
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Check out the pelican plugins repository outside of your project (plugins are only used during the build process):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git checkout https://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create your project directory, run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; and answer the questions just like for a blog site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkdir myproject &amp;amp;&amp;amp; cd $_
pelican-quickstart

Welcome to pelican-quickstart v3.6.3.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? Dog Agility Jump Height Calculator
&amp;gt; Who will be the author of this web site? Steve Schwarz
&amp;gt; What will be the default language of this web site? [en]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) y
&amp;gt; /agility-jump-heights           &amp;lt;-- enter the name of your GitHub repository
&amp;gt; Do you want to enable article pagination? (Y/n) n
&amp;gt; What is your time zone? [Europe/Paris] America/Chicago
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) y
&amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) n
Done. Your new project is available at /home/dev/agility-jump-heights
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Paste the following at the end of your &lt;tt class="docutils literal"&gt;pelican.conf&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
STATIC_PATHS = ['images']  # put page specific assets here
PLUGIN_PATHS = ['../pelican-plugins']  # set this to the location of your plugins checkout
PLUGINS = ['assets']
THEME = './theme'          # All CSS/JS files go in directories under here
# I only want to generate Pages so I disable all &amp;quot;blog-like&amp;quot; pages see Note in:
# http://docs.getpelican.com/en/stable/settings.html?highlight=url_for#url-settings
TAGS_SAVE_AS = ''          # Don't generate Tags pages
TAG_SAVE_AS = ''
CATEGORY_SAVE_AS = ''      # Don't generate Category pages
AUTHOR_SAVE_AS = ''        # Don't generate Author pages
DIRECT_TEMPLATES = ['index']  # Don't generate tag, category, or author output for some themes
# In the generated output directory move files to the root and adjust their URLs to match:
PAGE_URL = '{slug}.html'
PAGE_SAVE_AS = '{slug}.html'
INDEX_SAVE_AS = &amp;quot;/ignore/index.html&amp;quot;  # don't create normal index.html which lists all articles and pages
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Copy any theme from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-themes&lt;/span&gt;&lt;/tt&gt; into &lt;tt class="docutils literal"&gt;.theme&lt;/tt&gt; or I just copy the &lt;tt class="docutils literal"&gt;notmyidea&lt;/tt&gt; theme installed with Pelican from the virtualenv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cp -pR $VIRTUAL_ENV/lib/python*/site-packages/pelican/themes/notmyidea/ theme
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Have Git ignore the output directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
echo &amp;quot;/output&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="create-your-project-web-site"&gt;
&lt;h2&gt;Create Your Project Web Site&lt;/h2&gt;
&lt;div class="section" id="setup-templates"&gt;
&lt;h3&gt;Setup Templates&lt;/h3&gt;
&lt;p&gt;Edit &lt;tt class="docutils literal"&gt;./templates/base.html&lt;/tt&gt; and delete/add any sections, stylesheets and javascript you like. Your pages only need to define content that goes in the &lt;cite&gt;content&lt;/cite&gt; block of the Jinja templates. Of course you can define your own templates and use the full power of Jinja templating &lt;a class="reference external" href="http://docs.getpelican.com/en/stable/settings.html?highlight=url_for#template-pages"&gt;even for individual pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For small projects it is easiest to serve the same JS/CSS on all pages so I put them in the &lt;tt class="docutils literal"&gt;base.html&lt;/tt&gt; file. Using Jinja template inheritance you can also create and serve separate bundles for individual pages.&lt;/p&gt;
&lt;p&gt;I use &lt;tt class="docutils literal"&gt;webassets&lt;/tt&gt; right in the template to define how to combine JS/CSS files into bundles, minify and version them. For CSS files in the &lt;tt class="docutils literal"&gt;head&lt;/tt&gt; of my &lt;tt class="docutils literal"&gt;base.html&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 {% assets filters=&amp;quot;cssmin&amp;quot;, output=&amp;quot;css/style.%(version)s.min.css&amp;quot;, &amp;quot;css/normalize.css&amp;quot;, &amp;quot;css/skeleton.css&amp;quot;, &amp;quot;css/style.css&amp;quot; %}
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ SITEURL }}/{{ ASSET_URL }}&amp;quot;&amp;gt;
 {% endassets %}
&lt;/pre&gt;
&lt;p&gt;For JavaScript the bundled, versioned, compressed &lt;tt class="docutils literal"&gt;script&lt;/tt&gt; tag(s) is defined similarly just before the end of the HTML &lt;tt class="docutils literal"&gt;body&lt;/tt&gt; tag:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% assets filters=&amp;quot;jsmin&amp;quot;, output=&amp;quot;js/main.%(version)s.min.js&amp;quot;, &amp;quot;js/main.js&amp;quot; %}
&amp;lt;script src=&amp;quot;{{ SITEURL }}/{{ ASSET_URL }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
{% endassets %}
&lt;/pre&gt;
&lt;p&gt;For more options &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/blob/master/assets/Readme.rst"&gt;see the webassets README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Edit &lt;tt class="docutils literal"&gt;theme/templates/page.html&lt;/tt&gt; to suite your needs. I just put in a wrapper &lt;tt class="docutils literal"&gt;div&lt;/tt&gt; around the content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% extends &amp;quot;base.html&amp;quot; %}
{% block title %}{{ page.title }}{% endblock %}

{% block content %}
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
{{ page.content }}
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;You can also delete any CSS, JS, images, and unused Jinja templates from your copied theme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="write-the-pages"&gt;
&lt;h3&gt;Write the Pages&lt;/h3&gt;
&lt;p&gt;Create the &lt;tt class="docutils literal"&gt;pages&lt;/tt&gt; directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkdir content/pages
&lt;/pre&gt;
&lt;p&gt;Lastly put each page's body content in a file in the &lt;tt class="docutils literal"&gt;content/pages&lt;/tt&gt; directory. I like to write the body content in HTML. You put the Pelican metadata in &lt;tt class="docutils literal"&gt;meta&lt;/tt&gt; elements in the &lt;tt class="docutils literal"&gt;head&lt;/tt&gt; element as &lt;a class="reference external" href="http://docs.getpelican.com/en/stable/content.html#file-metadata"&gt;shown the Pelican docs&lt;/a&gt;. Here's &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt; and I recommend specifying the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;save_as&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;!-- By default used to create the URL slug --&amp;gt;
        &amp;lt;title&amp;gt;Dog Agility Jump Height Calculator&amp;lt;/title&amp;gt;
        &amp;lt;!-- Override the default URL made up of the slug; needed for the index.html --&amp;gt;
        &amp;lt;meta name=&amp;quot;save_as&amp;quot; content=&amp;quot;index.html&amp;quot;/&amp;gt;
        &amp;lt;!-- any other metadata attributes as meta tags; none normally needed --&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- all  markup goes here. e.g. --&amp;gt;
        &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;You can use any input syntax supported by Pelican e.g. ReStructuredText, Markdown, or even write a Reader class for your own custom input file format.&lt;/p&gt;
&lt;p&gt;Start up the Pelican development server to watch for file changes and regenerate changed files:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make devserver
&lt;/pre&gt;
&lt;p&gt;Point your browser to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000/&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I recommend using this &lt;a class="reference external" href="http://tech.agilitynerd.com/livereload-with-pelican.html"&gt;LiveReload script&lt;/a&gt; as it also watches for changes to the &lt;tt class="docutils literal"&gt;themes&lt;/tt&gt; directory and automatically reloads your browser on &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:5500&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Once you are setup just edit your templates, JS, and CSS under the &lt;tt class="docutils literal"&gt;theme&lt;/tt&gt; directory and add/edit pages in your &lt;tt class="docutils literal"&gt;content/pages&lt;/tt&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploy"&gt;
&lt;h3&gt;Deploy&lt;/h3&gt;
&lt;p&gt;I like to deploy small projects to GitHub Pages and it's this easy:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make github
&lt;/pre&gt;
&lt;p&gt;Then on GitHub enable GitHub Pages in your project's settings.&lt;/p&gt;
&lt;p&gt;To see this whole setup in action take a look at this &lt;a class="reference external" href="https://github.com/saschwarz/agility-jump-heights"&gt;single page calculator application with one JS and HTML file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next step to make this even easier would be to use &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter&lt;/a&gt; to make setting this up via one command.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="webdev"></category><category term="webops"></category><category term="pelican"></category><category term="CSS"></category><category term="JavaScript"></category></entry><entry><title>ReactJS SVG Path Player Component</title><link href="http://tech.agilitynerd.com/reactjs-svg-path-player-component.html" rel="alternate"></link><published>2016-01-24T12:00:00-06:00</published><updated>2016-01-24T12:00:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-01-24:/reactjs-svg-path-player-component.html</id><summary type="html">&lt;p&gt;I've been a big fan of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics"&gt;SVG&lt;/a&gt; images for many years for their light weight and resolution independence. I started playing with them back when most browsers needed a plugin to render them; which kept me from using them in web sites. Within the past few years SVG has become …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been a big fan of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics"&gt;SVG&lt;/a&gt; images for many years for their light weight and resolution independence. I started playing with them back when most browsers needed a plugin to render them; which kept me from using them in web sites. Within the past few years SVG has become natively supported by almost all browsers and mobile devices so I could finally use them on my &lt;a class="reference external" href="http://agilitycourses.com/"&gt;agilitycourses.com&lt;/a&gt; website to display dog agility obstacles and the sequences through them.&lt;/p&gt;
&lt;p&gt;My next enhancement to the site was to animate the shortest/fastest paths dogs could take through the obstacles. I had found the &lt;a class="reference external" href="http://snapsvg.io/"&gt;Snap.svg&lt;/a&gt; JavaScript library which is light weight, resonably well supported and, to make it even easier, I found a &lt;a class="reference external" href="http://icanbecreative.com/article/animate-element-along-svg-path/"&gt;great example of animating a path and a marker along the path&lt;/a&gt; using it.&lt;/p&gt;
&lt;p&gt;I decided to make a &amp;quot;media player component&amp;quot; that I could instantiate in multiple places in the site and realized if I generalized the component a little it might be useful for others.&lt;/p&gt;
&lt;p&gt;I also decided to use React to create it. React has a well defined component approach and I thought this would be a good learning experience with the library and the tooling/packaging required to share it.&lt;/p&gt;
&lt;p&gt;Here's what the SVG Path Player component looks like in action:&lt;/p&gt;
&lt;div class="thumbnail figure align-center"&gt;
&lt;img alt="Animated SVG Path Player in Action" src="{filename}/images/ac-dog-path-animation.gif" /&gt;
&lt;/div&gt;
&lt;p&gt;Here's an article from my dog agility blog &lt;a class="reference external" href="http://agilitynerd.com/blog/agility/handling/multiple-dog-paths-challenge-handling.html"&gt;explaining how dog agility handlers can use this player&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="some-things-i-learned"&gt;
&lt;h2&gt;Some Things I Learned&lt;/h2&gt;
&lt;p&gt;I won't walk through the code, &lt;a class="reference external" href="http://saschwarz.github.io/react-svgpathplayer/"&gt;it's all on GitHub&lt;/a&gt;, but I'll give you some pointers and links to articles/videos I found useful.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;SVGPathPlayer&lt;/tt&gt; component itself renders the UI and provides the button's callback methods that call to a Snap.svg element that &amp;quot;owns&amp;quot; the SVG image it controls. The &lt;tt class="docutils literal"&gt;componentDidMount&lt;/tt&gt; method uses Snap.svg to load the SVG image and select the path(s), and optional marker within it. Within the &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method the element into which the SVG image is rendered is a React &lt;a class="reference external" href="https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute"&gt;ref&lt;/a&gt; child element:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg-container svg-container-box&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svgImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I chose to store the &lt;tt class="docutils literal"&gt;ref&lt;/tt&gt; on &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; and not in the state of the component since it doesn't impact the component state; it is a data member used only by Snap.&lt;/p&gt;
&lt;p&gt;Once loaded the &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method uses a &lt;tt class="docutils literal"&gt;Controls&lt;/tt&gt; component to show the animation status and allow the user to start, stop and step forward/backward within the animation. The &lt;tt class="docutils literal"&gt;Controls&lt;/tt&gt; component is a &amp;quot;stateless&amp;quot; or &lt;a class="reference external" href="https://medium.com/&amp;#64;dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.qqffkj3iv"&gt;&amp;quot;dumb&amp;quot; compone t&lt;/a&gt;; it's buttons invoke callbacks provided via it's &lt;tt class="docutils literal"&gt;props&lt;/tt&gt; by it's parent &amp;quot;smart component&amp;quot;: &lt;tt class="docutils literal"&gt;SVGPathPlayer&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Making &lt;tt class="docutils literal"&gt;Controls&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Spinner&lt;/tt&gt; dumb components made writing tests for them really easy. I might never reuse these components, but they made reasoning about responsibilities easier and helped me simplify the interfaces (props) passed in to each component. Going through the refactoring into components I also deleted some internal state I didn't really need in the original monolithic component.&lt;/p&gt;
&lt;p&gt;Writing the React code was straight forward and I found using ES6 syntax made it even easier. The big challenges with this project were packaging it as a reusable component that could be used in both &amp;quot;script&amp;quot; and &amp;quot;npm&amp;quot; installations, generating GitHub hosted pages, and automating the testing/packaging/deployment as part of the Travis-CI automation.&lt;/p&gt;
&lt;p&gt;There are a lot of boilerplate React application projects out there but not too many for reusable React components. I found &lt;a class="reference external" href="https://github.com/survivejs/react-component-boilerplate"&gt;survivejs/react-component-boilerplate&lt;/a&gt; to be very well supported and included most of the functionality I wanted. I also bought the ebook &lt;a class="reference external" href="http://survivejs.com/"&gt;SurviveJS - Webpack and React - From apprentice to master&lt;/a&gt; which has been continuously updated to incorporate all the recent changes in the Webpack/Babel tools (I still need to migrate my tooling to the latest Babel release).&lt;/p&gt;
&lt;p&gt;So checkout my project's &lt;tt class="docutils literal"&gt;package.json npm&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/saschwarz/react-svgpathplayer/blob/master/package.json#L6"&gt;scripts&lt;/a&gt; and the &lt;tt class="docutils literal"&gt;webpack.config.babel.js&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/saschwarz/react-svgpathplayer/blob/master/webpack.config.babel.js#L164"&gt;distribution configurations&lt;/a&gt; for the scripts/configurations to create all the pieces. Getting all of this to work is still a little complex and I should document how I got it working as well as creating my own boilerplate project. I know I would have benefitted from an annotated versions of those files.&lt;/p&gt;
&lt;p&gt;Another very helpful resource was &lt;a class="reference external" href="http://kentcdodds.com/"&gt;Kent C. Dodds&lt;/a&gt; egghead.io videos on &lt;a class="reference external" href="https://egghead.io/series/how-to-write-an-open-source-javascript-library"&gt;How to Write an Open Source JavaScript Library&lt;/a&gt; particularly for Travis-CI integration and using semantic-release.&lt;/p&gt;
&lt;p&gt;If you are looking to make your own redistributable React components I strongly recommend reviewing both of those resources and looking through the configuration of my component. I hope to write up the details after I find some time to migrate the webpack tooling to the latest versions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="reactjs"></category><category term="javascript"></category><category term="SVG"></category></entry><entry><title>Reducing the Cost of Client Side Analytics</title><link href="http://tech.agilitynerd.com/reducing-the-impact-of-client-side-analytics.html" rel="alternate"></link><published>2012-01-12T22:10:00-06:00</published><updated>2012-01-12T22:10:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2012-01-12:/reducing-the-impact-of-client-side-analytics.html</id><summary type="html">&lt;p&gt;I read&amp;nbsp;&lt;a class="reference external" href="http://blog.mozilla.com/webdev/2012/01/06/timing-amo-user-experience/"&gt;Andy McKay's blog post on timing user experience&lt;/a&gt;&amp;nbsp;on the
&lt;a class="reference external" href="http://blog.mozilla.com/webdev"&gt;Mozilla Webdev blog&lt;/a&gt;&amp;nbsp;the other day and it reminded me of an idea I was
thinking about for measuring client side timings at work. I had been
toying with the idea of rolling our own library to capture …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I read&amp;nbsp;&lt;a class="reference external" href="http://blog.mozilla.com/webdev/2012/01/06/timing-amo-user-experience/"&gt;Andy McKay's blog post on timing user experience&lt;/a&gt;&amp;nbsp;on the
&lt;a class="reference external" href="http://blog.mozilla.com/webdev"&gt;Mozilla Webdev blog&lt;/a&gt;&amp;nbsp;the other day and it reminded me of an idea I was
thinking about for measuring client side timings at work. I had been
toying with the idea of rolling our own library to capture JavaScript
rendering time for our JS heavy pages (grids of hundreds of lines of
data).&lt;/p&gt;
&lt;p&gt;Andy's post mentions the &lt;a class="reference external" href="http://yahoo.github.com/boomerang/doc/"&gt;boomerang JavaScript library&lt;/a&gt;&amp;nbsp;and when I was
reading it's docs they pointed out potential for abuse/load on the URL
used to report the timings. For each instrumented page boomerang can hit
the &amp;quot;beacon&amp;quot; URL to report the statistics it collects. So in the worst
case you could double your page hits - although for specific
pages/samples recording a few statistics shouldn't be too costly for low
volume sites.&lt;/p&gt;
&lt;p&gt;One solution is to only sample the pages/users of interest; selecting
the sample could occur on the server and/or client. But another solution
would be to collect statistics across multiple pages and periodically
send batches of analytics to the beacon URL.&lt;/p&gt;
&lt;p&gt;I've been playing with mobile web development for
&lt;a class="reference external" href="http://m.agilitycourses.com/"&gt;agilitycourses.com&lt;/a&gt;&amp;nbsp;lately and will soon let users store the courses
they create in localStorage on their browser. That got me thinking that
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Web_Storage#Local_and_session_storage"&gt;sessionStorage&lt;/a&gt; could be used to store analytics across pages and then
periodically send the stats to the server. This would reduce the number
of hits on the beacon, allowing deployment to a larger sample of
clients. It also gets flushed once the session is closed and (if kept
small) doesn't prompt the user to approve storing the data.&lt;/p&gt;
&lt;p&gt;A lot of modern &lt;a class="reference external" href="http://www.delicious.com/redirect?url=http%3A//dev-test.nemikor.com/web-storage/support-test/"&gt;browsers support session storage&lt;/a&gt;&amp;nbsp;and for my purposes
only ones with support would be relevant - due to our browser support
policy at work.&lt;/p&gt;
&lt;p&gt;The other problem the boomerang docs discuss is&lt;a class="reference external" href="http://yahoo.github.com/boomerang/doc/howtos/howto-7.html"&gt;abuse of the beacon&lt;/a&gt;
(accidental or malicious). A solution would be to piggyback reporting of
analytics into application form post payloads. This is trickier to
implement and it suffers from coupling analytic reporting into the
application itself.&lt;/p&gt;
&lt;p&gt;To try to solve it some what generally... The client side JS library
could add a hidden field to any/some/specific forms into which it writes
the analytics data collected thus far. If it hooked the form submit
callback it could know if the form was successfully submitted and clear
the session storage.&lt;/p&gt;
&lt;p&gt;Server side middleware could detect the hidden analytics field in the
form and extract/store the data. It could also remove the field before
passing the request data along to the app server.&lt;/p&gt;
&lt;p&gt;All in all a fair amount of twiddling to keep from exposing a recording
URL to the outside world.&lt;/p&gt;
&lt;p&gt;Of course if an authenticated session was being used then abusers would
have to have a valid session to post to the beacon URL.&lt;/p&gt;
&lt;p&gt;I don't know if I will have time to play with the sessionStorage idea
but I think it might be a worthwhile extension to boomerang or other
client side analytics capture libraries.&lt;/p&gt;
</content><category term="analytics"></category><category term="boomerang"></category><category term="javascript"></category><category term="sessionstorage"></category><category term="webdevelopment"></category></entry><entry><title>Embedding JSON Within Generated HTML</title><link href="http://tech.agilitynerd.com/embedding-json-within-generated-html.html" rel="alternate"></link><published>2010-07-08T21:03:00-05:00</published><updated>2010-07-08T21:03:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-07-08:/embedding-json-within-generated-html.html</id><summary type="html">&lt;p&gt;Ran into an interesting problem at work this past week that had a simple
and pleasing resolution. We have an in house developed JavaScript grid
on some of our pages and when users entered some text strings we'd
generate invalid &lt;a class="reference external" href="http://www.json.org/js.html"&gt;JSON&lt;/a&gt; payloads that would give the user an error
page …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ran into an interesting problem at work this past week that had a simple
and pleasing resolution. We have an in house developed JavaScript grid
on some of our pages and when users entered some text strings we'd
generate invalid &lt;a class="reference external" href="http://www.json.org/js.html"&gt;JSON&lt;/a&gt; payloads that would give the user an error
page. If they entered strings that looked like an HTML Entity i.e. &amp;amp;#13
which (with the addition of a trailing ; ) is a non-visible HTML
character (carriage return) the text wasn't displayed in the widget. To
further complicate things some of the content displayed in the grid is
HTML which is inserted into the grid as is and can contain escaped HTML
characters.&lt;/p&gt;
&lt;p&gt;The grid gets its content as a JSON payload from within a hidden div in
the HTML which is generated via a template mechanism. Heres a portion of
the template where &amp;lt;%= and %&amp;gt; stringifying of the value of the Python
variable(s)/code they surround:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div style=&amp;quot;display:none;&amp;quot; id=&amp;quot;grid-init-args-&amp;lt;%= count %&amp;gt;&amp;quot;&amp;gt;
  &amp;lt;textarea&amp;gt;
  &amp;lt;!-- this is the JSON payload loaded via the grid JavaScript --&amp;gt;
  &amp;lt;%= [ columnsIndex, indexColumns, columns, rowBuffer, footerRows, formulas] %&amp;gt;
  &amp;lt;/textarea&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This approach has a number of problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;By using the template mechanism to create the JSON payload this
template was relying on the similarity of the string representation
of Python objects to JSON. After some testing I found the following
scenarios: If a string contained a single quote character the string
representation was a double quoted string around the text and the
single quote; a valid JSON string. If the string contained a double
quote character the string representation was a single quoted string
around the text and the double quote; &lt;a class="reference external" href="http://www.bennadel.com/blog/388-People-Please-Stop-Using-Single-Quotes-.htm"&gt;an invalid JSON string&lt;/a&gt;. If
the string contained both a single and a double quote the string
representation would be a single quoted string containing a slash
escaped single quote and the double quote; an invalid JSON string.
Depending on the browser (of course) the JSON string would fail to
parse correctly when the double quote was encountered within the
single quoted string.&lt;/li&gt;
&lt;li&gt;The JSON payload had to be HTML encoded (converting &amp;lt;, &amp;gt;, &amp;quot;, and &amp;amp;)
since it was parsed by the browser as HTML.&lt;/li&gt;
&lt;li&gt;The HTML encoding would encode or double encode HTML to be inserted
directly into the grid's DOM.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The variation in single/double quoting was an easy fix, I changed to
&lt;a class="reference external" href="http://pypi.python.org/pypi/simplejson/"&gt;simplejson&lt;/a&gt;.dumps() which correctly double quotes key/values in dicts
and escapes embedded double quotes (single quotes don't need to be
escaped). I didn't time it but with the C extension it may be faster
than the template engine for our larger datasets.&lt;/p&gt;
&lt;p&gt;I played around with (not) encoding various portions of the payload and
then it hit me that I should change the grid to get its payload from a
non HTML element so that only HTML destined for insertion into the DOM
would be HTML encoded (which is as you'd expect for normal HTML
handling). I started changing the payload to be stored in JavaScript
generated in the template but didn't like the impact the change would
have on all the existing templates. So I started Googling and found &lt;a class="reference external" href="http://www.bennadel.com/blog/1603-jQuery-And-Script-Tags-As-Data-Containers.htm"&gt;Ben
Nadel's blog post on using script tags as data containers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So here's my solution:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div style=&amp;quot;display:none;&amp;quot; id=&amp;quot;grid-init-args-&amp;lt;%= count %&amp;gt;&amp;quot;&amp;gt;
&amp;lt;script type=&amp;quot;application/json&amp;quot;&amp;gt;
&amp;lt;%= simplejson.dumps([ columnsIndex, indexColumns, columns, rowBuffer, footerRows, formulas]) %&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;There were two changes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Used &lt;tt class="docutils literal"&gt;simplejson.dumps&lt;/tt&gt; to correctly double quote and escape double
quotes within the variables in the payload.&lt;/li&gt;
&lt;li&gt;Change the textarea to a script element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By converting to a script tag within the hidden div the HTML parser no
longer parsed the content of the JSON payload. so the JSON payload only
needed to HTML encode HTML elements that were being inserted into the
DOM created by the grid.&lt;/p&gt;
&lt;p&gt;This change also meant I was able to delete the unnecessary HTML
encoding of non-HTML JSON payload data. Got to love solutions that
involve deleting code.&lt;/p&gt;
&lt;p&gt;Ultimately, we'll convert to loading the JSON payload as a separate AJAX
request from the page to the server, but for now this simplifies the
markup and handles all types of user input and HTML encoded characters
correctly.&lt;/p&gt;
</content><category term="html"></category><category term="javascript"></category><category term="json"></category><category term="python"></category><category term="webdevelopment"></category></entry><entry><title>Multiple YouTube Videos per page using VideoLightBox</title><link href="http://tech.agilitynerd.com/multiple-youtube-videos-per-page-using-videol.html" rel="alternate"></link><published>2010-06-04T22:58:00-05:00</published><updated>2010-06-04T22:58:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-06-04:/multiple-youtube-videos-per-page-using-videol.html</id><summary type="html">&lt;p&gt;I decided to stop displaying the default &lt;a class="reference external" href="http://youtube.com"&gt;YouTube&lt;/a&gt; video players within
posts on my &lt;a class="reference external" href="http://agilitynerd.com/"&gt;AgilityNerd blog&lt;/a&gt; and I started looking for a light boxed
player. Their were two main reasons. The smallest video playback window
provided by YouTube for HD videos is too wide for my two column layout
and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I decided to stop displaying the default &lt;a class="reference external" href="http://youtube.com"&gt;YouTube&lt;/a&gt; video players within
posts on my &lt;a class="reference external" href="http://agilitynerd.com/"&gt;AgilityNerd blog&lt;/a&gt; and I started looking for a light boxed
player. Their were two main reasons. The smallest video playback window
provided by YouTube for HD videos is too wide for my two column layout
and now that I'm posting more videos the load time of the page is
delayed by the communication with all the off site webservers; serving
the YouTube static image of the video will be much faster/lighter
weight.&lt;/p&gt;
&lt;p&gt;I looked around and really liked the lightbox containing the default
YouTube player provided by &lt;a class="reference external" href="http://videolightbox.com"&gt;VideoLightBox&lt;/a&gt; and started playing around
with their demo. VideoLightBox (VLB) has an interesting approach. You
download an application (PC or Mac), configure how you want your
video(s) to look and it generates a directory of files on your local
disk (or uploads files to your website via FTP) along with an index.html
file from which you copy the code to put in the &amp;lt;head&amp;gt; and &amp;lt;body&amp;gt; of
your web page. For YouTube it also downloads a static image for each
selected video which is used as the image link within the HTML page.
Straight forward and works well.&lt;/p&gt;
&lt;p&gt;For my purposes there was a problem with their approach, its locates the
image used to launch the light box using an element id. This assumes a
single video or gallery of videos per web page. On my blog's main page
or the category pages there will be multiple videos (possibly multiple
videos within a single post). I figured a little bit of CSS and JQuery
hacking would solve the problem and it did.&lt;/p&gt;
&lt;p&gt;I decided to modify their HTML/CSS/JS to use a CSS class instead of an
element id to allow for multiple videos per page. At first I just
modified the generated files. Then I saw that VLB has template files in
their installation. So I started modifying the templates to output the
new code. Two hours later I bailed. Using &lt;a class="reference external" href="http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx"&gt;procmon&lt;/a&gt; it looks like the
client app reads the template files but then doesn't actually use the
files to generate the output files(?). I was only able to modify one of
the three template files that needed to change and have it effect the
generated files.&lt;/p&gt;
&lt;p&gt;I'm going to provide my edits to the VLB developers in case they are
interested.&lt;/p&gt;
&lt;p&gt;So the solution is to edit one of the template files and then edit two
of the generated files; not ideal but once you put the generated files
on your webserver you'll probably not touch them unless you are changing
CSS styles. The modifications aren't hard but you need to be careful and
typos will definitely break things. You should backup the VLB directory
before your start or be prepared to uninstall and reinstall from their
installation program.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Navigate to the VideoLightBox directory (i.e. C:Program Files
(x86)VideoLightBox)&lt;/li&gt;
&lt;li&gt;Change the permissions on the templates subdirectory to give your
user full access to overwrite the files&lt;/li&gt;
&lt;li&gt;For each directory in the templates subdirectory open the
videolightbox.js file in an programming editor (a keyboard macro
makes this trivial):&lt;ol class="arabic"&gt;
&lt;li&gt;Globally replace $(&amp;quot;#videogallery a[rel]&amp;quot;) with
$(&amp;quot;.videogallery a[rel]&amp;quot;).each(function(idx){$(this)&lt;/li&gt;
&lt;li&gt;Go to the end of the line and add });&lt;/li&gt;
&lt;li&gt;Save the file&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then generate the output files using the VLB executable for one or more
videos, saving the results to your local file system&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Navigate to the output directory&lt;/li&gt;
&lt;li&gt;Open the index.html file in an programming editor&lt;ol class="arabic"&gt;
&lt;li&gt;Globally replace #videogallery with .videogallery&lt;/li&gt;
&lt;li&gt;Globally replace id=&amp;quot;videogallery&amp;quot; with class=&amp;quot;videogallery&amp;quot;&lt;/li&gt;
&lt;li&gt;Save the file&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;In the engine/css subdirectory open the videolightbox.css file in an
programming editor&lt;ol class="arabic"&gt;
&lt;li&gt;Globally replace #videogallery with .videogallery&lt;/li&gt;
&lt;li&gt;Save the file&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then you can copy the files just as specified by the VLB installation
instructions.&lt;/p&gt;
&lt;p&gt;The other change I'll be making for my deployment is to rename the video
images. They are named 0.png, 1.png, etc. I'm going to put them all in a
directory on my resource webserver so I'll rename the files and their
references in the code copied from the index.html to use the YouTube
video id.&lt;/p&gt;
&lt;p&gt;I'll be changing my existing web posts over to this new scheme over
time...&lt;/p&gt;
</content><category term="css"></category><category term="html"></category><category term="javascript"></category><category term="jquery"></category><category term="video"></category><category term="visuallightbox"></category><category term="webdevelopment"></category><category term="youtube"></category></entry></feed>