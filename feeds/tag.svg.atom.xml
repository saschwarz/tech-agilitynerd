<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tech.agilitynerd - SVG</title><link href="https://tech.agilitynerd.com/" rel="alternate"></link><link href="http://127.0.0.1:8000/feeds/tag.svg.atom.xml" rel="self"></link><id>https://tech.agilitynerd.com/</id><updated>2016-01-24T12:00:00-06:00</updated><entry><title>ReactJS SVG Path Player Component</title><link href="https://tech.agilitynerd.com/reactjs-svg-path-player-component.html" rel="alternate"></link><published>2016-01-24T12:00:00-06:00</published><updated>2016-01-24T12:00:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-01-24:/reactjs-svg-path-player-component.html</id><summary type="html">&lt;p&gt;I've been a big fan of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics"&gt;SVG&lt;/a&gt; images for many years for their light weight and resolution independence. I started playing with them back when most browsers needed a plugin to render them; which kept me from using them in web sites. Within the past few years SVG has become â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been a big fan of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics"&gt;SVG&lt;/a&gt; images for many years for their light weight and resolution independence. I started playing with them back when most browsers needed a plugin to render them; which kept me from using them in web sites. Within the past few years SVG has become natively supported by almost all browsers and mobile devices so I could finally use them on my &lt;a class="reference external" href="http://agilitycourses.com/"&gt;agilitycourses.com&lt;/a&gt; website to display dog agility obstacles and the sequences through them.&lt;/p&gt;
&lt;p&gt;My next enhancement to the site was to animate the shortest/fastest paths dogs could take through the obstacles. I had found the &lt;a class="reference external" href="http://snapsvg.io/"&gt;Snap.svg&lt;/a&gt; JavaScript library which is light weight, resonably well supported and, to make it even easier, I found a &lt;a class="reference external" href="http://icanbecreative.com/article/animate-element-along-svg-path/"&gt;great example of animating a path and a marker along the path&lt;/a&gt; using it.&lt;/p&gt;
&lt;p&gt;I decided to make a &amp;quot;media player component&amp;quot; that I could instantiate in multiple places in the site and realized if I generalized the component a little it might be useful for others.&lt;/p&gt;
&lt;p&gt;I also decided to use React to create it. React has a well defined component approach and I thought this would be a good learning experience with the library and the tooling/packaging required to share it.&lt;/p&gt;
&lt;p&gt;Here's what the SVG Path Player component looks like in action:&lt;/p&gt;
&lt;div class="thumbnail figure align-center"&gt;
&lt;img alt="Animated SVG Path Player in Action" src="https://tech.agilitynerd.com/images/ac-dog-path-animation.gif" /&gt;
&lt;/div&gt;
&lt;p&gt;Here's an article from my dog agility blog &lt;a class="reference external" href="http://agilitynerd.com/blog/agility/handling/multiple-dog-paths-challenge-handling.html"&gt;explaining how dog agility handlers can use this player&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="some-things-i-learned"&gt;
&lt;h2&gt;Some Things I Learned&lt;/h2&gt;
&lt;p&gt;I won't walk through the code, &lt;a class="reference external" href="http://saschwarz.github.io/react-svgpathplayer/"&gt;it's all on GitHub&lt;/a&gt;, but I'll give you some pointers and links to articles/videos I found useful.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;SVGPathPlayer&lt;/tt&gt; component itself renders the UI and provides the button's callback methods that call to a Snap.svg element that &amp;quot;owns&amp;quot; the SVG image it controls. The &lt;tt class="docutils literal"&gt;componentDidMount&lt;/tt&gt; method uses Snap.svg to load the SVG image and select the path(s), and optional marker within it. Within the &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method the element into which the SVG image is rendered is a React &lt;a class="reference external" href="https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute"&gt;ref&lt;/a&gt; child element:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg-container svg-container-box&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svgImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I chose to store the &lt;tt class="docutils literal"&gt;ref&lt;/tt&gt; on &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; and not in the state of the component since it doesn't impact the component state; it is a data member used only by Snap.&lt;/p&gt;
&lt;p&gt;Once loaded the &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method uses a &lt;tt class="docutils literal"&gt;Controls&lt;/tt&gt; component to show the animation status and allow the user to start, stop and step forward/backward within the animation. The &lt;tt class="docutils literal"&gt;Controls&lt;/tt&gt; component is a &amp;quot;stateless&amp;quot; or &lt;a class="reference external" href="https://medium.com/&amp;#64;dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.qqffkj3iv"&gt;&amp;quot;dumb&amp;quot; compone t&lt;/a&gt;; it's buttons invoke callbacks provided via it's &lt;tt class="docutils literal"&gt;props&lt;/tt&gt; by it's parent &amp;quot;smart component&amp;quot;: &lt;tt class="docutils literal"&gt;SVGPathPlayer&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Making &lt;tt class="docutils literal"&gt;Controls&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Spinner&lt;/tt&gt; dumb components made writing tests for them really easy. I might never reuse these components, but they made reasoning about responsibilities easier and helped me simplify the interfaces (props) passed in to each component. Going through the refactoring into components I also deleted some internal state I didn't really need in the original monolithic component.&lt;/p&gt;
&lt;p&gt;Writing the React code was straight forward and I found using ES6 syntax made it even easier. The big challenges with this project were packaging it as a reusable component that could be used in both &amp;quot;script&amp;quot; and &amp;quot;npm&amp;quot; installations, generating GitHub hosted pages, and automating the testing/packaging/deployment as part of the Travis-CI automation.&lt;/p&gt;
&lt;p&gt;There are a lot of boilerplate React application projects out there but not too many for reusable React components. I found &lt;a class="reference external" href="https://github.com/survivejs/react-component-boilerplate"&gt;survivejs/react-component-boilerplate&lt;/a&gt; to be very well supported and included most of the functionality I wanted. I also bought the ebook &lt;a class="reference external" href="http://survivejs.com/"&gt;SurviveJS - Webpack and React - From apprentice to master&lt;/a&gt; which has been continuously updated to incorporate all the recent changes in the Webpack/Babel tools (I still need to migrate my tooling to the latest Babel release).&lt;/p&gt;
&lt;p&gt;So checkout my project's &lt;tt class="docutils literal"&gt;package.json npm&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/saschwarz/react-svgpathplayer/blob/master/package.json#L6"&gt;scripts&lt;/a&gt; and the &lt;tt class="docutils literal"&gt;webpack.config.babel.js&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/saschwarz/react-svgpathplayer/blob/master/webpack.config.babel.js#L164"&gt;distribution configurations&lt;/a&gt; for the scripts/configurations to create all the pieces. Getting all of this to work is still a little complex and I should document how I got it working as well as creating my own boilerplate project. I know I would have benefitted from an annotated versions of those files.&lt;/p&gt;
&lt;p&gt;Another very helpful resource was &lt;a class="reference external" href="http://kentcdodds.com/"&gt;Kent C. Dodds&lt;/a&gt; egghead.io videos on &lt;a class="reference external" href="https://egghead.io/series/how-to-write-an-open-source-javascript-library"&gt;How to Write an Open Source JavaScript Library&lt;/a&gt; particularly for Travis-CI integration and using semantic-release.&lt;/p&gt;
&lt;p&gt;If you are looking to make your own redistributable React components I strongly recommend reviewing both of those resources and looking through the configuration of my component. I hope to write up the details after I find some time to migrate the webpack tooling to the latest versions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="reactjs"></category><category term="javascript"></category><category term="SVG"></category></entry></feed>