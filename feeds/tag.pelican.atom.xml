<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tech.agilitynerd - pelican</title><link href="https://tech.agilitynerd.com/" rel="alternate"></link><link href="https://tech.agilitynerd.com/feeds/tag.pelican.atom.xml" rel="self"></link><id>https://tech.agilitynerd.com/</id><updated>2016-11-08T13:00:00-06:00</updated><entry><title>Pelican For Fast Site/Project Development</title><link href="https://tech.agilitynerd.com/pelican-for-fast-siteproject-development.html" rel="alternate"></link><published>2016-11-08T13:00:00-06:00</published><updated>2016-11-08T13:00:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-11-08:/pelican-for-fast-siteproject-development.html</id><summary type="html">&lt;p&gt;I was working on a simple single page website for &lt;a class="reference external" href="http://www.agilitynerd.com/jumpheights/"&gt;calculating dog agility jump heights&lt;/a&gt; and was really missing the tool chain I normally use in Flask and Django web sites for bundling, compressing, and versioning CSS and JS files and a mechanism for putting the bundled/versioned file names â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was working on a simple single page website for &lt;a class="reference external" href="http://www.agilitynerd.com/jumpheights/"&gt;calculating dog agility jump heights&lt;/a&gt; and was really missing the tool chain I normally use in Flask and Django web sites for bundling, compressing, and versioning CSS and JS files and a mechanism for putting the bundled/versioned file names in the HTML files. I was searching for what I needed and was about to write a little script to do it and then it occurred to me that &lt;a class="reference external" href="http://getpelican.com"&gt;Pelican&lt;/a&gt; already has just what I needed!&lt;/p&gt;
&lt;p&gt;Pelican is known for making static generation of blogs easy. But it also has a lot of powerful features that can be easily leveraged to create small web sites and web sites for projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://webassets.readthedocs.io/en/latest/"&gt;webassets&lt;/a&gt; integration to SASS/LESS, minify, bundle, and version CSS and JavaScript. It automatically inserts versioned bundled names in the HTML.&lt;/li&gt;
&lt;li&gt;Dozens of &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;themes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Themes are implemented using &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2 templates&lt;/a&gt; and allow sharing page layouts across your project's pages. You can also have custom templates per page.&lt;/li&gt;
&lt;li&gt;Theme templates already contain useful integrations which can be used in you templates:&lt;ul&gt;
&lt;li&gt;Navigation&lt;/li&gt;
&lt;li&gt;Analytics&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dozens of &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;Pelican plugins&lt;/a&gt; can be installed to add new features.&lt;/li&gt;
&lt;li&gt;During development regeneration of files is automatic when you save files.&lt;/li&gt;
&lt;li&gt;Many deployment options are also available:&lt;ul&gt;
&lt;li&gt;GitHub pages&lt;/li&gt;
&lt;li&gt;FTP/SSH to your own server&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;S3&lt;/li&gt;
&lt;li&gt;Rackspace Cloud Files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I've written a lot of detail on every step but it is actually very easy to use Pelican for non-blog web sites. Here's how it works:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a virtualenv and install Pelican and webassets Python packages (I use the same venv for all my Pelican projects).&lt;/li&gt;
&lt;li&gt;Checkout pelican-plugins.&lt;/li&gt;
&lt;li&gt;Edit the Pelican theme's &lt;tt class="docutils literal"&gt;base.html&lt;/tt&gt; Jinja template to include the CSS and JavaScript files you need.&lt;/li&gt;
&lt;li&gt;Create your pages' body content in files in &lt;tt class="docutils literal"&gt;content/pages&lt;/tt&gt; in HTML, Markdown or reStructuredText.&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;make devserver&lt;/tt&gt; and refresh your browser to see your changes or use this &lt;a class="reference external" href="https://tech.agilitynerd.com/livereload-with-pelican.html"&gt;LiveReload script&lt;/a&gt; to automatically reload your browser. Repeat steps 3 and 4 until you are done.&lt;/li&gt;
&lt;li&gt;Deploy to GitHub Pages: &lt;tt class="docutils literal"&gt;make github&lt;/tt&gt;. Or deploy to your own server.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-the-environment"&gt;
&lt;h2&gt;Setup the Environment&lt;/h2&gt;
&lt;p&gt;Install and configure Pelican for creating non-blog web sites:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a virtualenv and install pelican, webassets, cssmin, and jsmin (or any other &lt;a class="reference external" href="http://webassets.readthedocs.io/en/latest/builtin_filters.html"&gt;CSS/JS filters supported by webassets&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv ~/virtualenvs/pelican
source ~/virtualenvs/pelican/bin/activate
pip install pelican webassets cssmin jsmin
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Check out the pelican plugins repository outside of your project (plugins are only used during the build process):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git checkout https://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create your project directory, run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; and answer the questions just like for a blog site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkdir myproject &amp;amp;&amp;amp; cd $_
pelican-quickstart

Welcome to pelican-quickstart v3.6.3.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? Dog Agility Jump Height Calculator
&amp;gt; Who will be the author of this web site? Steve Schwarz
&amp;gt; What will be the default language of this web site? [en]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) y
&amp;gt; /agility-jump-heights           &amp;lt;-- enter the name of your GitHub repository
&amp;gt; Do you want to enable article pagination? (Y/n) n
&amp;gt; What is your time zone? [Europe/Paris] America/Chicago
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) y
&amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) n
Done. Your new project is available at /home/dev/agility-jump-heights
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Paste the following at the end of your &lt;tt class="docutils literal"&gt;pelican.conf&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
STATIC_PATHS = ['images']  # put page specific assets here
PLUGIN_PATHS = ['../pelican-plugins']  # set this to the location of your plugins checkout
PLUGINS = ['assets']
THEME = './theme'          # All CSS/JS files go in directories under here
# I only want to generate Pages so I disable all &amp;quot;blog-like&amp;quot; pages see Note in:
# http://docs.getpelican.com/en/stable/settings.html?highlight=url_for#url-settings
TAGS_SAVE_AS = ''          # Don't generate Tags pages
TAG_SAVE_AS = ''
CATEGORY_SAVE_AS = ''      # Don't generate Category pages
AUTHOR_SAVE_AS = ''        # Don't generate Author pages
DIRECT_TEMPLATES = ['index']  # Don't generate tag, category, or author output for some themes
# In the generated output directory move files to the root and adjust their URLs to match:
PAGE_URL = '{slug}.html'
PAGE_SAVE_AS = '{slug}.html'
INDEX_SAVE_AS = &amp;quot;/ignore/index.html&amp;quot;  # don't create normal index.html which lists all articles and pages
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Copy any theme from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-themes&lt;/span&gt;&lt;/tt&gt; into &lt;tt class="docutils literal"&gt;.theme&lt;/tt&gt; or I just copy the &lt;tt class="docutils literal"&gt;notmyidea&lt;/tt&gt; theme installed with Pelican from the virtualenv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cp -pR $VIRTUAL_ENV/lib/python*/site-packages/pelican/themes/notmyidea/ theme
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Have Git ignore the output directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
echo &amp;quot;/output&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="create-your-project-web-site"&gt;
&lt;h2&gt;Create Your Project Web Site&lt;/h2&gt;
&lt;div class="section" id="setup-templates"&gt;
&lt;h3&gt;Setup Templates&lt;/h3&gt;
&lt;p&gt;Edit &lt;tt class="docutils literal"&gt;./templates/base.html&lt;/tt&gt; and delete/add any sections, stylesheets and javascript you like. Your pages only need to define content that goes in the &lt;cite&gt;content&lt;/cite&gt; block of the Jinja templates. Of course you can define your own templates and use the full power of Jinja templating &lt;a class="reference external" href="http://docs.getpelican.com/en/stable/settings.html?highlight=url_for#template-pages"&gt;even for individual pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For small projects it is easiest to serve the same JS/CSS on all pages so I put them in the &lt;tt class="docutils literal"&gt;base.html&lt;/tt&gt; file. Using Jinja template inheritance you can also create and serve separate bundles for individual pages.&lt;/p&gt;
&lt;p&gt;I use &lt;tt class="docutils literal"&gt;webassets&lt;/tt&gt; right in the template to define how to combine JS/CSS files into bundles, minify and version them. For CSS files in the &lt;tt class="docutils literal"&gt;head&lt;/tt&gt; of my &lt;tt class="docutils literal"&gt;base.html&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 {% assets filters=&amp;quot;cssmin&amp;quot;, output=&amp;quot;css/style.%(version)s.min.css&amp;quot;, &amp;quot;css/normalize.css&amp;quot;, &amp;quot;css/skeleton.css&amp;quot;, &amp;quot;css/style.css&amp;quot; %}
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ SITEURL }}/{{ ASSET_URL }}&amp;quot;&amp;gt;
 {% endassets %}
&lt;/pre&gt;
&lt;p&gt;For JavaScript the bundled, versioned, compressed &lt;tt class="docutils literal"&gt;script&lt;/tt&gt; tag(s) is defined similarly just before the end of the HTML &lt;tt class="docutils literal"&gt;body&lt;/tt&gt; tag:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% assets filters=&amp;quot;jsmin&amp;quot;, output=&amp;quot;js/main.%(version)s.min.js&amp;quot;, &amp;quot;js/main.js&amp;quot; %}
&amp;lt;script src=&amp;quot;{{ SITEURL }}/{{ ASSET_URL }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
{% endassets %}
&lt;/pre&gt;
&lt;p&gt;For more options &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/blob/master/assets/Readme.rst"&gt;see the webassets README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Edit &lt;tt class="docutils literal"&gt;theme/templates/page.html&lt;/tt&gt; to suite your needs. I just put in a wrapper &lt;tt class="docutils literal"&gt;div&lt;/tt&gt; around the content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% extends &amp;quot;base.html&amp;quot; %}
{% block title %}{{ page.title }}{% endblock %}

{% block content %}
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
{{ page.content }}
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;p&gt;You can also delete any CSS, JS, images, and unused Jinja templates from your copied theme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="write-the-pages"&gt;
&lt;h3&gt;Write the Pages&lt;/h3&gt;
&lt;p&gt;Create the &lt;tt class="docutils literal"&gt;pages&lt;/tt&gt; directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkdir content/pages
&lt;/pre&gt;
&lt;p&gt;Lastly put each page's body content in a file in the &lt;tt class="docutils literal"&gt;content/pages&lt;/tt&gt; directory. I like to write the body content in HTML. You put the Pelican metadata in &lt;tt class="docutils literal"&gt;meta&lt;/tt&gt; elements in the &lt;tt class="docutils literal"&gt;head&lt;/tt&gt; element as &lt;a class="reference external" href="http://docs.getpelican.com/en/stable/content.html#file-metadata"&gt;shown the Pelican docs&lt;/a&gt;. Here's &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt; and I recommend specifying the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;save_as&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;!-- By default used to create the URL slug --&amp;gt;
        &amp;lt;title&amp;gt;Dog Agility Jump Height Calculator&amp;lt;/title&amp;gt;
        &amp;lt;!-- Override the default URL made up of the slug; needed for the index.html --&amp;gt;
        &amp;lt;meta name=&amp;quot;save_as&amp;quot; content=&amp;quot;index.html&amp;quot;/&amp;gt;
        &amp;lt;!-- any other metadata attributes as meta tags; none normally needed --&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- all  markup goes here. e.g. --&amp;gt;
        &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;You can use any input syntax supported by Pelican e.g. ReStructuredText, Markdown, or even write a Reader class for your own custom input file format.&lt;/p&gt;
&lt;p&gt;Start up the Pelican development server to watch for file changes and regenerate changed files:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make devserver
&lt;/pre&gt;
&lt;p&gt;Point your browser to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000/&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I recommend using this &lt;a class="reference external" href="https://tech.agilitynerd.com/livereload-with-pelican.html"&gt;LiveReload script&lt;/a&gt; as it also watches for changes to the &lt;tt class="docutils literal"&gt;themes&lt;/tt&gt; directory and automatically reloads your browser on &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:5500&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Once you are setup just edit your templates, JS, and CSS under the &lt;tt class="docutils literal"&gt;theme&lt;/tt&gt; directory and add/edit pages in your &lt;tt class="docutils literal"&gt;content/pages&lt;/tt&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploy"&gt;
&lt;h3&gt;Deploy&lt;/h3&gt;
&lt;p&gt;I like to deploy small projects to GitHub Pages and it's this easy:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make github
&lt;/pre&gt;
&lt;p&gt;Then on GitHub enable GitHub Pages in your project's settings.&lt;/p&gt;
&lt;p&gt;To see this whole setup in action take a look at this &lt;a class="reference external" href="https://github.com/saschwarz/agility-jump-heights"&gt;single page calculator application with one JS and HTML file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next step to make this even easier would be to use &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter&lt;/a&gt; to make setting this up via one command.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="webdev"></category><category term="webops"></category><category term="pelican"></category><category term="CSS"></category><category term="JavaScript"></category></entry><entry><title>LiveReload with Pelican</title><link href="https://tech.agilitynerd.com/livereload-with-pelican.html" rel="alternate"></link><published>2016-11-06T00:00:00-05:00</published><updated>2016-11-06T00:00:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-11-06:/livereload-with-pelican.html</id><summary type="html">&lt;p&gt;I was looking to use &lt;a class="reference external" href="http://livereload.com/"&gt;LiveReload&lt;/a&gt; while developing using  &lt;a class="reference external" href="http://getpelican.com"&gt;Pelican&lt;/a&gt; and I came across this &lt;a class="reference external" href="https://merlijn.vandeen.nl/2015/pelican-livereload.html"&gt;nice simple solution&lt;/a&gt; by &lt;a class="reference external" href="https://merlijn.vandeen.nl/"&gt;Merlijn van Deen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my use case I also wanted to watch the &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; file and &lt;tt class="docutils literal"&gt;themes&lt;/tt&gt; directory for changes and then regenerate the output and reload the browser. Lastly â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was looking to use &lt;a class="reference external" href="http://livereload.com/"&gt;LiveReload&lt;/a&gt; while developing using  &lt;a class="reference external" href="http://getpelican.com"&gt;Pelican&lt;/a&gt; and I came across this &lt;a class="reference external" href="https://merlijn.vandeen.nl/2015/pelican-livereload.html"&gt;nice simple solution&lt;/a&gt; by &lt;a class="reference external" href="https://merlijn.vandeen.nl/"&gt;Merlijn van Deen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my use case I also wanted to watch the &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; file and &lt;tt class="docutils literal"&gt;themes&lt;/tt&gt; directory for changes and then regenerate the output and reload the browser. Lastly I wanted to use the host/port defined in my &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt;. So I made some small edits to his script named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-livereload.py&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/saschwarz/8eff30f5ea5d468f0b86bd0bb149a186.js"&gt;&lt;/script&gt;&lt;p&gt;Just copy it into your Pelican top level directory and execute it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python ./pelican-livereload.py
&lt;/pre&gt;
&lt;p&gt;The LiveReload server automatically injects the livereload JavaScript script tag into the HTML so you don't need to install the LiveReload browser extension.&lt;/p&gt;
&lt;p&gt;So all you need to do is visit the &lt;tt class="docutils literal"&gt;SITEURL&lt;/tt&gt; you've specified in your &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; otherwise it defaults to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:5500&lt;/span&gt;&lt;/tt&gt;. Then any edit you make causes Pelican to regenerate the files and the browser immediately refreshes. The only downside to the regular Pelican watcher feature is all files are regenerated instead of just the modified file. But for me having the browser automatically reload is is worth the extra brief delay.&lt;/p&gt;
</content><category term="python"></category><category term="webdev"></category><category term="pelican"></category></entry><entry><title>Upgrading Pelican and Migrating to GitHub Pages</title><link href="https://tech.agilitynerd.com/upgrading-pelican-migrating-gh-pages.html" rel="alternate"></link><published>2015-11-29T15:00:00-06:00</published><updated>2015-11-29T15:00:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2015-11-29:/upgrading-pelican-migrating-gh-pages.html</id><summary type="html">&lt;p&gt;I've been using &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; for this blog for almost three years with source and output stored in a GitHub repository. The output files were then checked out and hosted as static content behind an &lt;a class="reference external" href="http://www.nginx.com/"&gt;NGINX web server&lt;/a&gt; on my VPS. Since I set that up GitHub introduced &lt;a class="reference external" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; with â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been using &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; for this blog for almost three years with source and output stored in a GitHub repository. The output files were then checked out and hosted as static content behind an &lt;a class="reference external" href="http://www.nginx.com/"&gt;NGINX web server&lt;/a&gt; on my VPS. Since I set that up GitHub introduced &lt;a class="reference external" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; with support for custom domains and all the &amp;quot;cool kids&amp;quot; started hosting their static web sites right on GitHub.&lt;/p&gt;
&lt;p&gt;I had some free time this weekend and decided to see what it would take to upgrade my Pelican version to the latest (3.6.3) and host my files on GitHub Pages. I had four steps to perform:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a new environment with the latest Pelican&lt;/li&gt;
&lt;li&gt;Update my content files for the changes in Pelican versions&lt;/li&gt;
&lt;li&gt;Put output files into GitHub and verify them on GitHub Pages&lt;/li&gt;
&lt;li&gt;Move my subdomain to point to my GitHub Pages&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="create-new-environment"&gt;
&lt;h2&gt;Create New Environment&lt;/h2&gt;
&lt;p&gt;I didn't want to screw up my existing/working virtual environment so I created a new one containing Pelican and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ghp-import&lt;/span&gt;&lt;/tt&gt; which does all the work of updating the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch with the output:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# Create a new virtualenv
&lt;/span&gt;mkvirtualenv pelican-new
&lt;span class="c1"&gt;# Install pelican and ghp-import:
&lt;/span&gt;pip install pelican ghp-import
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="update-content"&gt;
&lt;h2&gt;Update Content&lt;/h2&gt;
&lt;p&gt;This was arguably the most painful part as I wasn't using appropriate reStructuredText markup for my images and the location of images required removing &lt;tt class="docutils literal"&gt;/static&lt;/tt&gt; from the path. So my markup went from:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.. raw:: html

   &amp;lt;div class=&amp;quot;thumbnail&amp;quot;&amp;gt;

&amp;lt;img src=&amp;quot;/static/images/myimage.png&amp;quot; /&amp;gt;

.. raw:: html

   &amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;to this (which includes adding a missing &lt;tt class="docutils literal"&gt;alt&lt;/tt&gt; tag):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.. class:: thumbnail
.. figure:: {filename}/images/myimage.png
   :alt: Clever alt image text goes here
&lt;/pre&gt;
&lt;p&gt;Those changes were mostly mechanical and using &lt;tt class="docutils literal"&gt;figure::&lt;/tt&gt; in place of &lt;tt class="docutils literal"&gt;raw::&lt;/tt&gt; also cleaned up the mark up. I tested the changes locally and confirmed all modified pages where displaying correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="convert-to-github-pages"&gt;
&lt;h2&gt;Convert to GitHub Pages&lt;/h2&gt;
&lt;p&gt;This setup is now documented in the Pelican docs on &lt;a class="reference external" href="http://docs.getpelican.com/en/3.6.3/tips.html#publishing-to-github"&gt;Publish to GitHub&lt;/a&gt; and is easy.&lt;/p&gt;
&lt;p&gt;It looks like the clever setup is to put the source for the blog in the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch and then check the output of running &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; into a branch called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt;.  The &lt;a class="reference external" href="https://github.com/davisp/ghp-import"&gt;ghp-import python package&lt;/a&gt; does all the work of creating and updating the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch from the &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; directory for you!&lt;/p&gt;
&lt;p&gt;The first thing I did was to switch to my &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch and then remove the &lt;tt class="docutils literal"&gt;content&lt;/tt&gt; directory and all of it's files:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
git checkout master
rm -rf output
&lt;/pre&gt;
&lt;p&gt;Then I edited the &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt; file to exclude the &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;I wanted to keep my existing blog working until I worked out all the kinks in the migration. So I delayed pointing DNS to the GitHub pages. That meant I needed to temporarily change the URL of the blog to match where it will be hosted on GitHub pages. So I edited the &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt; configuration file and changed the &lt;tt class="docutils literal"&gt;SITEURL&lt;/tt&gt; temporarily from:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://steve.agilitynerd.com'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;to it's location on GitHub Pages:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://saschwarz.github.io/steve-agilitynerd'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Get the URL by clicking on the Settings tab for the GitHub repository:&lt;/p&gt;
&lt;div class="thumbnail figure"&gt;
&lt;img alt="Screenshot of GitHub settings showing URL for GitHub pages" src="https://tech.agilitynerd.com/images/github-pages-url.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Now that the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch is set up I checked in and commited the changes:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
git commit -a -m&lt;span class="s2"&gt;&amp;quot;Migration to GitHub Pages&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now I followed the instructions in the Pelican docs to generate the output and add it to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch via &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ghp-import&lt;/span&gt;&lt;/tt&gt; (except they show using &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; which I use for local development)&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
pelican content -o output -s publishconf.py
ghp-import output
&lt;/pre&gt;
&lt;p&gt;or, since I opted to have Pelican automation setup, I did:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make github
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ghp-import&lt;/span&gt;&lt;/tt&gt; committed and pushed the output to GitHub and I tested that files/images were correctly being served by going to the GitHub Pages URL in my browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="move-subdomain-to-github-pages"&gt;
&lt;h2&gt;Move Subdomain to GitHub Pages&lt;/h2&gt;
&lt;p&gt;This step is well documented in the GitHub help page: &lt;a class="reference external" href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/"&gt;About custom domains for GitHub Pages sites&lt;/a&gt;. In my case I was already using a subdomain for my Pelican blogs so I just followed their instructions.&lt;/p&gt;
&lt;p&gt;On my VPS's DNS configuration screen I deleted my subdomain's &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; record pointing to my VPS and added a &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; record pointing to my GitHub &lt;cite&gt;.io&lt;/cite&gt; account.&lt;/p&gt;
&lt;p&gt;Then &lt;strong&gt;don't followed these instructions:&lt;/strong&gt; &lt;a class="reference external" href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/"&gt;Adding a CNAME file to your repository&lt;/a&gt; to setup a &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; file in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch. The instructions work but &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ghp-import&lt;/span&gt;&lt;/tt&gt; deletes the content of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch before re-adding files and that deletes the &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; file you just added!&lt;/p&gt;
&lt;p&gt;After some googling I found Tip #2 in the &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/tips.html#extra-tips"&gt;Pelican Tips&lt;/a&gt; and followed their instructions. I added the following to my &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'extra/CNAME'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'extra/CNAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'CNAME'&lt;/span&gt;&lt;span class="p"&gt;},}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then I created the &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; file in the new &lt;tt class="docutils literal"&gt;content/extra&lt;/tt&gt; directory with the name of my subdomain in it:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;steve.agilitynerd.com&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Undo the edit to &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt; so it uses the subdomain name:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://steve.agilitynerd.com'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Commit that edit to the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch and then regenerate the output and commit it to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branches:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
git commit -a -m&lt;span class="s2"&gt;&amp;quot;Done with migration to sub domain&amp;quot;&lt;/span&gt;
git push
make github
&lt;/pre&gt;
&lt;p&gt;Opened the browser to my subdomain and verified that images and links within the site were working correctly. I went back to my VPS and disabled the subdomains from NGINX and deleted the blog check outs to free some resources.  Two fewer websites to maintain on my VPS!&lt;/p&gt;
&lt;/div&gt;
</content><category term="pelican"></category><category term="github"></category><category term="python"></category></entry><entry><title>Moved To Pelican</title><link href="https://tech.agilitynerd.com/moved-to-pelican.html" rel="alternate"></link><published>2013-03-17T12:00:00-05:00</published><updated>2013-03-17T12:00:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2013-03-17:/moved-to-pelican.html</id><summary type="html">&lt;p&gt;Way back in 2004, when the content in this blog was a category in the main &lt;a class="reference external" href="http://agilitynerd.com"&gt;AglityNerd blog&lt;/a&gt;, I used the Perl &lt;a class="reference external" href="http://blosxom.sourceforge.net/"&gt;Blosxom&lt;/a&gt; application to serve the blog. When my dog agility readers complained/were confused by the sprinkling of tech postings I split off tech.agilitynerd in another Blosxom â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Way back in 2004, when the content in this blog was a category in the main &lt;a class="reference external" href="http://agilitynerd.com"&gt;AglityNerd blog&lt;/a&gt;, I used the Perl &lt;a class="reference external" href="http://blosxom.sourceforge.net/"&gt;Blosxom&lt;/a&gt; application to serve the blog. When my dog agility readers complained/were confused by the sprinkling of tech postings I split off tech.agilitynerd in another Blosxom instance.&lt;/p&gt;
&lt;p&gt;Once modern web hosted blogs came in to existence I wanted to see how they worked and moved the tech content to &lt;a class="reference external" href="http://posterous.com"&gt;posterous&lt;/a&gt;. That was only OK, the source code formatting was painful but it did support email and web based content creation. I was reasonably content, not bugged enough to move again.&lt;/p&gt;
&lt;p&gt;Then posterous announced &lt;a class="reference external" href="http://blog.posterous.com/thanks-from-posterous"&gt;it is closing on April 30&lt;/a&gt; so I finally had to do something. This site really only needs a few features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;easy format in which to write content&lt;/li&gt;
&lt;li&gt;source code formatting&lt;/li&gt;
&lt;li&gt;Atom/RSS feeds&lt;/li&gt;
&lt;li&gt;comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use Disqus for comments on my other sites so that meant I could go with a statically generated site. Also since I primarily code in Python I wanted a platform to which I could contribute. I came across &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; and it fit the bill nicely.&lt;/p&gt;
&lt;p&gt;I exported the posterous posts, imported them through a temporary wordpress.com site using their posterous importer and finally re-exported them in wordpress format. After a quick bug fix to the pelican wordpress importer I had reStructured Text files for each post. After a few days of editing the embeded source code in the content files and fixing long broken links, I had the blog running and not looking bad at all.&lt;/p&gt;
&lt;p&gt;I wanted a Twitter Bootstrap based responsive layout and I found &lt;a class="reference external" href="https://github.com/azizmb/pelican-bootstrap-responsive-theme"&gt;azizmb's pelican-bootstrap-responsive-them&lt;/a&gt; which had a very pleasing layout. I tweaked it to have category and tag feeds and some other enhancements to get what you see today. I will see if Aziz is interested in pulling any of my changes back.&lt;/p&gt;
&lt;p&gt;So far I like using Pelican and I've made the &lt;a class="reference external" href="https://github.com/saschwarz/tech-agilitynerd"&gt;content of the blog&lt;/a&gt; and my &lt;a class="reference external" href="https://github.com/saschwarz/pelican-bootstrap-responsive-theme"&gt;edits to the theme&lt;/a&gt; available on github in case anyone is interested.&lt;/p&gt;
</content><category term="posterous"></category><category term="pelican"></category><category term="blosxom"></category><category term="bootstrap"></category></entry></feed>