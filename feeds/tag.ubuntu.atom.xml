<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tech.agilitynerd</title><link href="http://tech.agilitynerd.com/" rel="alternate"></link><link href="http://127.0.0.1:8000/feeds/tag.ubuntu.atom.xml" rel="self"></link><id>http://tech.agilitynerd.com/</id><updated>2016-09-04T12:02:00-05:00</updated><entry><title>NGINX, HTTPS, Let's Encrypt, and Django</title><link href="http://tech.agilitynerd.com/nginx-https-lets-encrypt-and-django.html" rel="alternate"></link><published>2016-09-04T12:02:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-09-04:nginx-https-lets-encrypt-and-django.html</id><summary type="html">&lt;p&gt;My &lt;a class="reference external" href="https://agilitycourses.com"&gt;agilitycourses.com&lt;/a&gt; website is served by &lt;a class="reference external" href="https://nginx.org/en/"&gt;nginx&lt;/a&gt; proxying to &lt;a class="reference external" href="http://gunicorn.org/"&gt;gunicorn&lt;/a&gt; running my &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; application. I'll be adding user accounts soon so I wanted to convert the site to be more secure by using HTTPS encryption. Also &lt;a class="reference external" href="https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html"&gt;Google has announced it will likely prefer sites using HTTPS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The site is running on Ubuntu 14.04 LTS. I won't recount the whole process, I followed some great resources and made a couple adjustments that might be helpful to others.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I basically followed the instructions in this excellent Digital Ocean tutorial: &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04"&gt;How To Secure Nginx with Let's Encrypt on Ubuntu 14.04&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I confirmed via the &lt;a class="reference external" href="https://www.ssllabs.com/ssltest/analyze.html"&gt;SSL Labs SSL Server Test&lt;/a&gt; that my IPv4 and IPv6 server configurations had &amp;quot;A+&amp;quot; ratings.&lt;/li&gt;
&lt;li&gt;While looking for other SSL testing sites I came across &lt;a class="reference external" href="https://securityheaders.io/"&gt;securityheaders.io&lt;/a&gt; developed by &lt;a class="reference external" href="https://scotthelme.co.uk/"&gt;Scott Helme&lt;/a&gt;. My initial score was a sad &amp;quot;D&amp;quot;. The site has snippets for NGINX and Apache configuration changes and in depth articles describing the how and the why.&lt;/li&gt;
&lt;li&gt;While investigating the changes to the HTTP Headers to improve my test score I came across this &lt;a class="reference external" href="https://github.com/jonnybarnes/nginx-conf"&gt;nginx-conf GitHub repository&lt;/a&gt;. Specifically the idea of putting the header settings into an &lt;a class="reference external" href="https://github.com/jonnybarnes/nginx-conf/blob/master/conf/includes/security-headers.conf"&gt;NGINX include file&lt;/a&gt;. I have several other domains on the same server and will also be converting them. I used that idea to include ssl and header configurations into any virtual host.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's my &lt;cite&gt;/etc/nginx/ssl.conf&lt;/cite&gt; file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# From https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;
ssl_stapling on;
ssl_stapling_verify on;
&lt;/pre&gt;
&lt;p&gt;And my &lt;cite&gt;/etc/nginx/security_headers.conf&lt;/cite&gt; file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# See https://github.com/jonnybarnes/nginx-conf/blob/master/conf/includes/security-headers.conf
add_header X-Xss-Protection &amp;quot;1; mode=block&amp;quot;;
add_header X-Content-Type-Options &amp;quot;nosniff&amp;quot;;
add_header Content-Security-Policy &amp;quot;default-src https: data: 'unsafe-inline' 'unsafe-eval'&amp;quot;;
add_header Strict-Transport-Security max-age=15768000;
&lt;/pre&gt;
&lt;p&gt;So my server blocks with all these edits are now:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# redirect http://www.tld and http://tld to https://www.tld
server {
    listen 80;
    listen [::]:80;
    server_name www.agilitycourses.com agilitycourses.com;

    # letsencrypt location
    location ^~ /.well-known/ {
        allow all;
        root /usr/share/nginx/html/;
    }
    return 301 https://www.agilitycourses.com$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ipv6only=on ssl;

    server_name www.agilitycourses.com;
    root /home/agilitycourses/production/current/;

    ssl_certificate /etc/letsencrypt/live/agilitycourses.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/agilitycourses.com/privkey.pem;

    include /etc/nginx/ssl.conf;
    include /etc/nginx/security_headers.conf;
    ...
}
&lt;/pre&gt;
&lt;p&gt;So now I have an &amp;quot;A&amp;quot; score from &lt;cite&gt;securityheaders.io&lt;/cite&gt;&lt;/p&gt;
&lt;ol class="arabic" start="5"&gt;
&lt;li&gt;&lt;p class="first"&gt;The Digital Ocean tutorial sets up a root crontab entry to automatically update the SSL Certificate. I decided to also update the letsencrypt client software automatically:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# m h  dom mon dow   command
20 2 * * 1 cd /opt/letsencrypt &amp;amp;&amp;amp; git pull
30 2 * * 1 /opt/letsencrypt/letsencrypt-auto renew &amp;gt;&amp;gt; /var/log/le-renew.log
35 2 * * 1 /etc/init.d/nginx reload
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The last change I made was to pass along the presence/absence of HTTPS from NGINX to Gunicorn/Django via the &lt;cite&gt;X-Forwarded-Proto&lt;/cite&gt; header as &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/topics/security/#ssl-https"&gt;described in the Django SSL/HTTPS docs&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
location &amp;#64;proxy-to-app {
    proxy_pass http://agilitycourses-production-gunicorn;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Accept-Encoding &amp;quot;&amp;quot;;
    proxy_read_timeout 120;
    proxy_send_timeout 120;
    ...
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Based on the Django recommendations I also made these changes in my &lt;cite&gt;settings.py&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# SSL settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even with a lot of web browsing to learn about these settings the whole process only took a couple hours.
Now that I've done it once (and updated my Fabric fabfile.py) it will be easier to convert my other domains.&lt;/p&gt;
</summary><category term="nginx"></category><category term="ubuntu"></category><category term="https"></category><category term="ssl"></category><category term="django"></category><category term="gunicorn"></category><category term="letsencrypt"></category></entry><entry><title>NGINX CGI Parameter Gotcha</title><link href="http://tech.agilitynerd.com/nginx-cgi-parameter-gotcha.html" rel="alternate"></link><published>2016-07-31T12:02:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2016-07-31:nginx-cgi-parameter-gotcha.html</id><summary type="html">&lt;p&gt;When I first started the &lt;a class="reference external" href="http://agilitynerd.com"&gt;agilitynerd&lt;/a&gt;  blog in 2004 I had my &lt;a class="reference external" href="http://blosxom.sourceforge.net/"&gt;Blosxom&lt;/a&gt; blogging CGI script running via &lt;a class="reference external" href="http://httpd.apache.org/"&gt;Apache&lt;/a&gt;. Later on I moved all my sites to &lt;a class="reference external" href="https://nginx.org/en/"&gt;nginx&lt;/a&gt; or took advantage of nginx's caching features to have it act as a proxy in front of Apache. I finally decided to remove Apache entirely and that meant solving running CGI scripts using nginx.&lt;/p&gt;
&lt;p&gt;After some googling I found FastCGI and &lt;a class="reference external" href="https://www.nginx.com/resources/wiki/start/topics/examples/fcgiwrap/"&gt;fcgiwrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm on Ubuntu so installation was as easy as:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install fcgiwrap
&lt;/pre&gt;
&lt;p&gt;That setup the init script that starts the fcgi daemon. To run the cgi script(s) nginx has to be configured to parse apart the incoming URL, execute the appropriate script and pass along any arguments needed by the CGI script. Sounds easy.&lt;/p&gt;
&lt;p&gt;I only want to support running a single CGI script: &lt;tt class="docutils literal"&gt;index.cgi&lt;/tt&gt; and pass along the path after the root of URL as the argument to the script. Most examples are more generic and parse out any cgi script and any arguments.&lt;/p&gt;
&lt;p&gt;The key built-in to nginx to do the splitting is &lt;tt class="docutils literal"&gt;fastcgi_split_path_info&lt;/tt&gt; which takes a regex with two captured groups to parse out the script name and the arguments. These are stored in the &lt;tt class="docutils literal"&gt;$fastcgi_script_name&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;$fastcgi_path_info&lt;/tt&gt; variables respectively. This &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx"&gt;Digital Ocean article&lt;/a&gt; discusses FastCGI and has an excellent discussion of the variables available and also used by &lt;tt class="docutils literal"&gt;fcgiwrap&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So I created this configuration file that matches &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://agilitynerd.com/blog/foo.html&lt;/span&gt;&lt;/tt&gt; and invokes &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/home/agilitynerd/cgi-bin/index.cgi&lt;/span&gt; foo.html&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
location /blog/ {
    root /home/agilitynerd/cgi-bin/;

    fastcgi_split_path_info ^(/blog)(.*)$;
    include /etc/nginx/fastcgi_params;
    fastcgi_param DOCUMENT_ROOT /home/agilitynerd/cgi-bin/;
    fastcgi_param SCRIPT_NAME index.cgi$fastcgi_path_info;

    # Fastcgi socket
    fastcgi_pass  unix:/var/run/fcgiwrap.socket;
}
&lt;/pre&gt;
&lt;p&gt;You'll notice: &lt;tt class="docutils literal"&gt;include /etc/nginx/fastcgi_params&lt;/tt&gt; is used to get default values for the &lt;tt class="docutils literal"&gt;fastcgi_param&lt;/tt&gt; variables.&lt;/p&gt;
&lt;p&gt;And it didn't work. I kept getting errors:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cannot get script name, are DOCUMENT_ROOT and SCRIPT_NAME (or SCRIPT_FILENAME) set and is the script executable?&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Clearly I'm setting &lt;tt class="docutils literal"&gt;DOCUMENT_ROOT&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SCRIPT_NAME&lt;/tt&gt;. After almost a day of googling and testing (during which I found this helpful article on &lt;a class="reference external" href="https://blog.martinfjordvald.com/2013/06/debugging-nginx-errors/"&gt;nginx debugging&lt;/a&gt;) I temporarily commented out &lt;tt class="docutils literal"&gt;fastcgi_pass&lt;/tt&gt;, and returned the variables.&lt;/p&gt;
&lt;p&gt;I found that they were being set as I expected... Strange!&lt;/p&gt;
&lt;p&gt;Then I came across this &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx"&gt;Digital Ocean article&lt;/a&gt; where they have a critical discussion on overriding variables in which they state:&lt;/p&gt;
&lt;blockquote&gt;
This inconsistency and unpredictability means that you cannot and should not rely on the backend to correctly interpret your intentions when setting the same parameter more than one time. The only safe solution is to only declare each parameter once. This also means that there is no such thing as safely overriding a default value with the fastcgi_param directive.&lt;/blockquote&gt;
&lt;p&gt;So in my case I commented out &lt;tt class="docutils literal"&gt;DOCUMENT_ROOT&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SCRIPT_FILENAME&lt;/tt&gt; in the &lt;tt class="docutils literal"&gt;/etc/nginx/fastcgi_params&lt;/tt&gt; file, reloaded nginx, and voila! Everything worked. Hope this helps you if you run in to the same problem.&lt;/p&gt;
</summary><category term="nginx"></category><category term="cgi"></category><category term="fcgiwrap"></category><category term="ubuntu"></category><category term="apache"></category></entry><entry><title>Configuring Runit for Gunicorn and Django Installed in a Virtualenv on Ubuntu</title><link href="http://tech.agilitynerd.com/configuring-runit-for-gunicorn-and-django-ins.html" rel="alternate"></link><published>2010-09-08T03:08:00-05:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-09-08:configuring-runit-for-gunicorn-and-django-ins.html</id><summary type="html">&lt;p&gt;I couldn't find any documentation that covered all the pieces for
configuring my latest Django site so I hope this helps someone else out.&lt;/p&gt;
&lt;p&gt;I had used &lt;tt class="docutils literal"&gt;mod_wsgi&lt;/tt&gt; under Apache for my other Django sites. But now I'm
using different python versions for the sites (until if/when I update
the older sites) and I wasn't getting the correct versions of some
python libraries (even though virtualenv apeared to be putting the
appropriate python packages at the start of the sys.path). So I decided
to configure Apache to ProxyPass to &lt;a class="reference external" href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; so I could run my
Django app in its virtualenv without it getting any other python
modules.&lt;/p&gt;
&lt;div class="section" id="installing-gunicorn"&gt;
&lt;h2&gt;Installing Gunicorn&lt;/h2&gt;
&lt;p&gt;I installed Gunicorn into the virtualenv for my application, which
simplifies using gunicorn from the command line. Assuming
&lt;tt class="docutils literal"&gt;/home/user/virtualenvs/myapp&lt;/tt&gt; is the location of the virtualenv:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ source /home/user/virtualenvs/myapp/bin/activate
$ pip install gunicorn

# or
$ easy_install gunicorn
&lt;/pre&gt;
&lt;p&gt;This copies &lt;tt class="docutils literal"&gt;gunicorn_django&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;/home/user/virtualenvs/myapp/bin&lt;/tt&gt;
directory. Test gunicorn with your app, assuming your Django app is
located at &lt;tt class="docutils literal"&gt;/home/user/source/myapp&lt;/tt&gt;, as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ source /home/user/virtualenvs/myapp/bin/activate
(myapp)$ cd /home/user/source/myapp
(myapp)$ gunicorn_django
&lt;/pre&gt;
&lt;p&gt;Gunicorn starts myapp using the &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; file in the current
directory on &lt;tt class="docutils literal"&gt;127.0.0.1:8000&lt;/tt&gt;. Ctrl-C to stop the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-runit-on-ubuntu"&gt;
&lt;h2&gt;Installing Runit on Ubuntu&lt;/h2&gt;
&lt;p&gt;There are two &lt;a class="reference external" href="http://smarden.org/runit/index.html"&gt;runit&lt;/a&gt; packages. You want the one that only runs
services you add to it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo apt-get install runit
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
&amp;nbsp; runit-run socklog-run
The following NEW packages will be installed:
&amp;nbsp; runit0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 0B/113kB of archives.After this operation, 537kB of additional disk space will be used.
Selecting previously deselected package runit.
(Reading database ... 209845 files and directories currently installed.)
Unpacking runit (from .../runit_2.0.0-1ubuntu2_i386.deb) ...
Processing triggers for man-db ...
Setting up runit (2.0.0-1ubuntu2) ...
runsvdir (start) waiting
runsvdir (start) startingrunsvdir (start) pre-start
runsvdir (start) spawned, process 9575
runsvdir (start) post-start, (main) process 9575
runsvdir (start) running, process 9575
&lt;/pre&gt;
&lt;p&gt;You'll want to create a directory for the application and a run script
in &lt;tt class="docutils literal"&gt;/etc/service:&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo mkdir /etc/service/myapp
$ sudo vi /etc/service/myapp/run
# enter the run script I'll show below
$ sudo chmod +x /etc/service/myapp/run
# stop runit from trying to run gunicorn until we are ready
$ sudo sv stop myapp
ok: down: myapp: 0s, normally up
&lt;/pre&gt;
&lt;p&gt;The example run script checked into Gunicorn had some syntax errors
and wasn't quite what I wanted. Here's my version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/bin/sh
GUNICORN=/home/user/virtualenvs/myapp/bin/gunicorn_django
ROOT=/home/user/source/myapp
PID=/var/run/myapp.pid

if [ -f $PID ]
&amp;nbsp;&amp;nbsp;&amp;nbsp; then rm $PID
fi

cd $ROOT
exec $GUNICORN -c $ROOT/gunicorn.conf.py --pid=$PID
&lt;/pre&gt;
&lt;p&gt;You can create a &lt;a class="reference external" href="http://gunicorn.org/configure.html"&gt;configuration file for gunicorn&lt;/a&gt; to use or just
create an empty file for now:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ touch /home/user/source/myapp/gunicorn.conf.py
&lt;/pre&gt;
&lt;p&gt;If you have multiple appserver you'll need to run gunicorn on
different ports, you can put the configuration in the gunicorn.conf.py
file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind = &amp;quot;127.0.0.1:8111&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-it-together"&gt;
&lt;h2&gt;Putting it Together&lt;/h2&gt;
&lt;p&gt;Now you can test that the run script works when run as root:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo /etc/service/myapp/run
&lt;/pre&gt;
&lt;p&gt;Gunicorn should start and start the appserver. If it fails you can
debug the script via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo bash -x /etc/service/myapp/run
&lt;/pre&gt;
&lt;p&gt;Tell runit to start and keep gunicorn running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo sv start myapp
ok: run: myapp: (pid 7540) 0s
$ sudo sv status myapp
run: myapp: (pid 7540) 1s
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="apache"></category><category term="django"></category><category term="gunicorn"></category><category term="runit"></category><category term="ubuntu"></category><category term="virtualenv"></category></entry><entry><title>Notes on Configuring Postfix on Ubuntu Gutsy to Send Email via Google Apps</title><link href="http://tech.agilitynerd.com/notes-on-configuring-postfix-on-ubuntu-gutsy-1.html" rel="alternate"></link><published>2008-01-05T23:53:00-06:00</published><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2008-01-05:notes-on-configuring-postfix-on-ubuntu-gutsy-1.html</id><summary type="html">&lt;p&gt;Here are some notes I took on configuring my &lt;a class="reference external" href="http://www.slicehost.com/"&gt;Slicehost&lt;/a&gt; Ubuntu Gutsy
installation to use Postfix to send emails via Google Apps. I am far
from an expert on postfix configuration but maybe these notes will be
helpful to others needing this configuration.&lt;/p&gt;
&lt;p&gt;These sites contain the key information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://behindmyscreen.newsvine.com/_news/2006/12/31/501615-configuringubuntu-postfix-and-gmail-in-101-easy-steps"&gt;Behind My Screen - Configuring[Ubuntu] Postfix and Gmail in 10+1
Easy Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://prantran.blogspot.com/2007/01/getting-postfix-to-work-on-ubuntu-with.html"&gt;The Prancing Tarantula - Getting Postfix to work on Ubuntu with
Gmail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://souptonuts.sourceforge.net/postfix_tutorial.html"&gt;Mike Chirico - Gmail on Home Linux Box using Postfix and Fetchmail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I basically followed the Behind My Screen tutorial (read the comments
too) with the updates from The Prancing Tarantula and the following
changes.&lt;/p&gt;
&lt;p&gt;My Ubuntu server install didn't have the Thawte certificates installed
by default so I installed them:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo aptitude install ca-certificates
&lt;/pre&gt;
&lt;p&gt;Then you can append that file to your /etc/postfix/cacert.pem If you
&amp;quot;sudo su&amp;quot; before doing the append to the file you won't get messed up by
the shell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo su
# cat /etc/ssl/certs/Thawte_Premium_Server_CA.pem &amp;gt;&amp;gt;
/etc/postfix/cacert.pem
&lt;/pre&gt;
&lt;p&gt;Since I have Google Apps setup for my domain I don't just want to relay
email as &amp;quot;&lt;a class="reference external" href="mailto:user&amp;#64;gmail.com"&gt;user&amp;#64;gmail.com&lt;/a&gt;&amp;quot;, I want the email to be sent as though it
came from my domain (&amp;quot;&lt;a class="reference external" href="mailto:me&amp;#64;agilitynerd.com"&gt;me&amp;#64;agilitynerd.com&lt;/a&gt;&amp;quot;). This requires some simple
changes to the config files.&lt;/p&gt;
&lt;p&gt;In my transport file I have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
agilitynerd.com smtp:[smtp.gmail.com]:587
&lt;/pre&gt;
&lt;p&gt;In my generic file I have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
demo&amp;#64;myservername.agilitynerd.com me&amp;#64;agilitynerd.com
&lt;/pre&gt;
&lt;p&gt;Where &amp;quot;demo&amp;quot; is the login name and &amp;quot;myservername&amp;quot; is my slicename. In my
sasl_passwd file I have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[smtp.gmail.com]:587 me&amp;#64;agilitynerd.com:me_gmail_account_password
&lt;/pre&gt;
&lt;p&gt;After restarting postix you can test sending email from your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo aptitude install mailx
$ mailx -s &amp;quot;test email&amp;quot; someotheraccount&amp;#64;gmail.com &amp;lt;
~/sometestfile_to_send
&lt;/pre&gt;
&lt;p&gt;Check your logfiles for errors/warnings:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo tail /var/log/mail.\*
&lt;/pre&gt;
&lt;p&gt;I hope these notes might help folks &amp;quot;get over the hump&amp;quot; if they are
setting up the same configuration.&lt;/p&gt;
</summary><category term="postfix"></category><category term="slicehost"></category><category term="ubuntu"></category></entry></feed>