<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tech.agilitynerd</title><link href="http://tech.agilitynerd.com/" rel="alternate"></link><link href="http://127.0.0.1:8000/feeds/tag.gunicorn.atom.xml" rel="self"></link><id>http://tech.agilitynerd.com/</id><updated>2010-10-05T14:34:00-05:00</updated><entry><title>Mobile Web Site Redirects in Django</title><link href="http://tech.agilitynerd.com/conditional-mobile-web-site-redirect-in-djang.html" rel="alternate"></link><updated>2010-10-05T14:34:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-10-05:conditional-mobile-web-site-redirect-in-djang.html</id><summary type="html">&lt;p&gt;For the mobile version of agilitycourses.com I wanted to follow the
approach Google appears to be using on some of its sites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the user views agilitycourses.com from a desktop browser they
should see the standard/desktop version of the site.&lt;/li&gt;
&lt;li&gt;If the user views agilitycourses.com from a mobile browser they
should be redirected to a mobile domain (m.agilitycourses.com).&lt;/li&gt;
&lt;li&gt;The mobile version of the website includes a link to the standard
version.&lt;/li&gt;
&lt;li&gt;If the mobile user chooses the standard website they should &amp;quot;stick&amp;quot;
on that site and not be redirected to the mobile site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to run two different websites but share templates and have the
templates and css change for the mobile site. That meant that I'd need
to set a variable(s) in the request to use to generate the appropriate
HTML. So I found the simplest mobile device detector &lt;a class="reference external" href="http://code.google.com/p/minidetector/"&gt;minidetector&lt;/a&gt; and
initially used that. I later found &lt;a class="reference external" href="http://github.com/shelfworthy/minidetector"&gt;Chris Drackett's fork&lt;/a&gt; has a number
of useful enhancements and switched to it.&lt;/p&gt;
&lt;p&gt;But minidetector didn't provide the ability to redirect to another site.
I found &lt;a class="reference external" href="http://www.packtpub.com/article/multiple-templates-in-django"&gt;Scott Newman's article&lt;/a&gt; on using multiple templates which had
a section on performing the redirect and storing the user's selection in
the session. So I forked Chris' minidetector and modified it to include
the redirect and session storage. At the same time I decided to store
all the minidetector variables into the session and add them, via
middleware, to the request so the raw request wouldn't have to be parsed
each time. My fork is &lt;a class="reference external" href="http://github.com/saschwarz/minidetector"&gt;available here&lt;/a&gt; with details on the new
configuration options.&lt;/p&gt;
&lt;p&gt;I'm using two domains so I can track analytics for the mobile and
non-mobile sites separately and allow users to bookmark the desired
site's pages. I use Google Analytics (via django-google-analytics) and
Awstats for analytics.&lt;/p&gt;
&lt;p&gt;Since I'm using two separate domain and sharing everything else I'm
using a setup similar to the one described by &lt;a class="reference external" href="http://www.nerdydork.com/mobile-app-on-subdomain-with-django.html"&gt;Dustin Davis&lt;/a&gt;. I have a
settings.py file and a mobile_settings.py that only overrides the
features I need:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from settings import *
SITE_ID = 2
CACHE_MIDDLEWARE_KEY_PREFIX = &amp;quot;m.ac-&amp;quot;
&lt;/pre&gt;
&lt;p&gt;I use a different memcached key prefix so the cached pages for the
mobile site don't clash with those for the desktop site.&lt;/p&gt;
&lt;p&gt;I setup m.agilitycourses on my server using the same &lt;a class="reference external" href="http://tech.agilitynerd.com/configuring-runit-for-gunicorn-and-django-ins"&gt;Gunicorn setup I
used for agilitycourses.com&lt;/a&gt; with the only changes being specifying the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--bind&lt;/span&gt; address/port&lt;/tt&gt; and the name of the mobile settings file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh
GUNICORN=/home/user/virtualenvs/myapp/bin/gunicorn_django
ROOT=/home/user/source/myapp
PID=/var/run/myapp.pid
if [ -f $PID ]
&amp;nbsp;&amp;nbsp;&amp;nbsp; then rm $PID fi
cd $ROOT
exec $GUNICORN --bind 127.0.0.1:8001 -c $ROOT/gunicorn.conf.py --pid=$PID $ROOT/mobile_settings.py
&lt;/pre&gt;
&lt;p&gt;If my templates/content start to diverge more significantly between the
mobile and desktop sites I may set the TEMPLATE_DIRS differently in the
mobile_settings file. Or I can move to Dustin's approach and create a
new application containing the urls.py and views.py specific to my
mobile deployment. I would think diverging further would call for a
refactoring of the common functionality to its own application which
could be imported into separate code branches for each domain.&lt;/p&gt;
</summary><category term="django"></category><category term="gunicorn"></category><category term="minidetector"></category><category term="mobile"></category></entry><entry><title>Configuring Runit for Gunicorn and Django Installed in a Virtualenv on Ubuntu</title><link href="http://tech.agilitynerd.com/configuring-runit-for-gunicorn-and-django-ins.html" rel="alternate"></link><updated>2010-09-08T03:08:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2010-09-08:configuring-runit-for-gunicorn-and-django-ins.html</id><summary type="html">&lt;p&gt;I couldn't find any documentation that covered all the pieces for
configuring my latest Django site so I hope this helps someone else out.&lt;/p&gt;
&lt;p&gt;I had used &lt;tt class="docutils literal"&gt;mod_wsgi&lt;/tt&gt; under Apache for my other Django sites. But now I'm
using different python versions for the sites (until if/when I update
the older sites) and I wasn't getting the correct versions of some
python libraries (even though virtualenv apeared to be putting the
appropriate python packages at the start of the sys.path). So I decided
to configure Apache to ProxyPass to &lt;a class="reference external" href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; so I could run my
Django app in its virtualenv without it getting any other python
modules.&lt;/p&gt;
&lt;div class="section" id="installing-gunicorn"&gt;
&lt;h2&gt;Installing Gunicorn&lt;/h2&gt;
&lt;p&gt;I installed Gunicorn into the virtualenv for my application, which
simplifies using gunicorn from the command line. Assuming
&lt;tt class="docutils literal"&gt;/home/user/virtualenvs/myapp&lt;/tt&gt; is the location of the virtualenv:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ source /home/user/virtualenvs/myapp/bin/activate
$ pip install gunicorn

# or
$ easy_install gunicorn
&lt;/pre&gt;
&lt;p&gt;This copies &lt;tt class="docutils literal"&gt;gunicorn_django&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;/home/user/virtualenvs/myapp/bin&lt;/tt&gt;
directory. Test gunicorn with your app, assuming your Django app is
located at &lt;tt class="docutils literal"&gt;/home/user/source/myapp&lt;/tt&gt;, as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ source /home/user/virtualenvs/myapp/bin/activate
(myapp)$ cd /home/user/source/myapp
(myapp)$ gunicorn_django
&lt;/pre&gt;
&lt;p&gt;Gunicorn starts myapp using the &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt; file in the current
directory on &lt;tt class="docutils literal"&gt;127.0.0.1:8000&lt;/tt&gt;. Ctrl-C to stop the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-runit-on-ubuntu"&gt;
&lt;h2&gt;Installing Runit on Ubuntu&lt;/h2&gt;
&lt;p&gt;There are two &lt;a class="reference external" href="http://smarden.org/runit/index.html"&gt;runit&lt;/a&gt; packages. You want the one that only runs
services you add to it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo apt-get install runit
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
&amp;nbsp; runit-run socklog-run
The following NEW packages will be installed:
&amp;nbsp; runit0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 0B/113kB of archives.After this operation, 537kB of additional disk space will be used.
Selecting previously deselected package runit.
(Reading database ... 209845 files and directories currently installed.)
Unpacking runit (from .../runit_2.0.0-1ubuntu2_i386.deb) ...
Processing triggers for man-db ...
Setting up runit (2.0.0-1ubuntu2) ...
runsvdir (start) waiting
runsvdir (start) startingrunsvdir (start) pre-start
runsvdir (start) spawned, process 9575
runsvdir (start) post-start, (main) process 9575
runsvdir (start) running, process 9575
&lt;/pre&gt;
&lt;p&gt;You'll want to create a directory for the application and a run script
in &lt;tt class="docutils literal"&gt;/etc/service:&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo mkdir /etc/service/myapp
$ sudo vi /etc/service/myapp/run
# enter the run script I'll show below
$ sudo chmod +x /etc/service/myapp/run
# stop runit from trying to run gunicorn until we are ready
$ sudo sv stop myapp
ok: down: myapp: 0s, normally up
&lt;/pre&gt;
&lt;p&gt;The example run script checked into Gunicorn had some syntax errors
and wasn't quite what I wanted. Here's my version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/bin/sh
GUNICORN=/home/user/virtualenvs/myapp/bin/gunicorn_django
ROOT=/home/user/source/myapp
PID=/var/run/myapp.pid

if [ -f $PID ]
&amp;nbsp;&amp;nbsp;&amp;nbsp; then rm $PID
fi

cd $ROOT
exec $GUNICORN -c $ROOT/gunicorn.conf.py --pid=$PID
&lt;/pre&gt;
&lt;p&gt;You can create a &lt;a class="reference external" href="http://gunicorn.org/configure.html"&gt;configuration file for gunicorn&lt;/a&gt; to use or just
create an empty file for now:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ touch /home/user/source/myapp/gunicorn.conf.py
&lt;/pre&gt;
&lt;p&gt;If you have multiple appserver you'll need to run gunicorn on
different ports, you can put the configuration in the gunicorn.conf.py
file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind = &amp;quot;127.0.0.1:8111&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-it-together"&gt;
&lt;h2&gt;Putting it Together&lt;/h2&gt;
&lt;p&gt;Now you can test that the run script works when run as root:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo /etc/service/myapp/run
&lt;/pre&gt;
&lt;p&gt;Gunicorn should start and start the appserver. If it fails you can
debug the script via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo bash -x /etc/service/myapp/run
&lt;/pre&gt;
&lt;p&gt;Tell runit to start and keep gunicorn running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo sv start myapp
ok: run: myapp: (pid 7540) 0s
$ sudo sv status myapp
run: myapp: (pid 7540) 1s
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="apache"></category><category term="django"></category><category term="gunicorn"></category><category term="runit"></category><category term="ubuntu"></category><category term="virtualenv"></category></entry></feed>