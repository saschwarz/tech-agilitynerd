<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tech.agilitynerd</title><link href="http://tech.agilitynerd.com/" rel="alternate"></link><link href="http://tech.agilitynerd.com/feeds/tag.development.atom.xml" rel="self"></link><id>http://tech.agilitynerd.com/</id><updated>2013-12-09T20:02:00-06:00</updated><entry><title>cookiecutter-djangopackage - Do the Right Thing</title><link href="http://tech.agilitynerd.com/cookiecutter-django-do-the-right-thing.html" rel="alternate"></link><updated>2013-12-09T20:02:00-06:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2013-12-09:cookiecutter-django-do-the-right-thing.html</id><summary type="html">&lt;p&gt;In preparation for upgrading and enhancing &lt;a class="reference external" href="http://googility.com"&gt;Googility.com&lt;/a&gt; I've started breaking out reusable applications, upgrading them, and open sourcing the code on GitHub. I wanted to follow development best practices and create high quality applications including these features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A full set of tests.&lt;/li&gt;
&lt;li&gt;Near 100% code coverage.&lt;/li&gt;
&lt;li&gt;Continuous Integration running on each check-in via &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Documentation in Sphinx on &lt;a class="reference external" href="https://readthedocs.org/"&gt;Read the Docs (RTD)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Packaging/versioning compatible with &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;PyPi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Packaging building/testing on multiple python versions using virtualenvs via &lt;a class="reference external" href="http://tox.readthedocs.org/en/latest/"&gt;tox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had started researching each aspect and was getting a little frustrated that there wasn't a best practice for tying everthing together. Then I came across &lt;a class="reference external" href="https://twitter.com/audreyr"&gt;Audrey Roy's&lt;/a&gt; &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; and &lt;a class="reference external" href="http://pydanny.com/"&gt;Daniel Greenfeld's&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pydanny/cookiecutter-djangopackage"&gt;cookiecutter-djangopackage&lt;/a&gt;. &lt;tt class="docutils literal"&gt;cookiecutter&lt;/tt&gt; is a utility to create project directory structures and files from the command line. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cookiecutter-djangopackage&lt;/span&gt;&lt;/tt&gt; is a template for creating a reusable Django application.&lt;/p&gt;
&lt;p&gt;Yes there are other similar projects, and Django provides &lt;tt class="docutils literal"&gt;startproject&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;startapp&lt;/tt&gt; commands that can take template arguments. But since I've never used Travis, RTD or tox I really wanted to leverage more experienced developers' knowledge so I could set them up in a &amp;quot;smart&amp;quot; way.&lt;/p&gt;
&lt;p&gt;That's what I liked about &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cookiecutter-djangopackage&lt;/span&gt;&lt;/tt&gt; it came with sane defaults that worked out of the box &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; and did smart stuff like wiring the version from the package's &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; in to the documentation and &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; used by &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; is wired in to &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt; is used in the &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; and included in the Spinx docs.&lt;/p&gt;
&lt;p&gt;And there are other integrations that make it easy to release a professional Django application. In fact that's my long winded point - it makes it hard to not do the right thing! I might have skipped using one or more of these support technologies, but &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cookiecutter-djangopackage&lt;/span&gt;&lt;/tt&gt; made it easy for me to use them and focus on writing code, tests and documentation.&lt;/p&gt;
&lt;p&gt;So that is what I want to stress: with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cookiecutter-djangopackage&lt;/span&gt;&lt;/tt&gt; you &lt;em&gt;can&lt;/em&gt; create a packaged application, whose code is tested on multiple python/Django versions, tested for installation, installable via PyPi and nicely documented without much additional effort.&lt;/p&gt;
&lt;p&gt;So take look at my nearly released &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-periodicals&lt;/span&gt;&lt;/tt&gt; application to see how it all works on &lt;a class="reference external" href="https://github.com/saschwarz/django-periodicals"&gt;GitHub&lt;/a&gt;, &lt;a class="reference external" href="http://django-periodicals.readthedocs.org/en/latest/"&gt;RTD&lt;/a&gt; and &lt;a class="reference external" href="https://travis-ci.org/saschwarz/django-periodicals"&gt;Travis&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rubric: Footnotes --&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I did submit a &lt;a class="reference external" href="https://github.com/pydanny/cookiecutter-djangopackage/pull/13"&gt;pull request&lt;/a&gt; and found another resolved issue with application names that don't match their imported package name. (i.e. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-periodicals&lt;/span&gt;&lt;/tt&gt; is the application name and &lt;tt class="docutils literal"&gt;periodicals&lt;/tt&gt; is the package that is imported).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="python"></category><category term="django"></category><category term="googility"></category><category term="development"></category><category term="testing"></category><category term="travis"></category><category term="rtd"></category><category term="pypi"></category><category term="tox"></category><category term="virtualenv"></category><category term="webdevelopment"></category><category term="github"></category></entry><entry><title>My Favorite ORM and Python Anti-Patterns</title><link href="http://tech.agilitynerd.com/my-favorite-orm-anti-pattern.html" rel="alternate"></link><updated>2012-05-12T23:57:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2012-05-12:my-favorite-orm-anti-pattern.html</id><summary type="html">&lt;p&gt;At work I was looking at improving the performance of one of our slower
web pages. It can be rewarding to find a little piece of code that can
be easily optimized. This time there were several functions that were
adding 10+ sec to the page in worst case. It wasn't a problem for most
clients, but when clients with who are related to many other clients hit
the page they'd experience terrible performance. Here's pseudo code for
the combination of anti-patterns that caused the problem:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Projects have users and users are in different organizations
# (project can contain multiple organization's users)
activeOrganizationProjectUsers = [x for x in project.users
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if x.active and x.organization == organization]
if activeOrganizationProjectUsers:
&amp;nbsp;&amp;nbsp;&amp;nbsp; # do something *NOT* using activeOrganizationProjectUsers
&lt;/pre&gt;
&lt;p&gt;There are two main problems with this code:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It ignores the fact the project, users, and organization are backed
by an ORM&lt;/li&gt;
&lt;li&gt;The list comprehension is being used to find all matching elements
when only a single element is needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="ignoring-the-orm"&gt;
&lt;h2&gt;Ignoring the ORM&lt;/h2&gt;
&lt;p&gt;The code above wouldn't be too bad if these were just lists of objects
in memory. But being objects that are instantiated by an ORM a number of
database queries will be issued. In this particular case (w/o eager
loading across user to the organization table) the following queries
where executed:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Join project to user and get all users for the project's id&lt;/li&gt;
&lt;li&gt;For each user load their organization (one by one) if the user is
active&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So in the case where there were hundreds of users on a project there
were hundreds of queries executed and hundreds of User and Organization
instances were instantiated. Depending on the size of the objects (and
the ORM's behavior) it can take &amp;quot;real time&amp;quot; to fetch and instantiate all
these large objects.&lt;/p&gt;
&lt;p&gt;This code base has this kind of code sprinkled through out it. At one
time during it's development the developers were encouraged to treat ORM
backed objects as though they were Plain Old Python Objects (POPOs). The
developer wouldn't necessarily see the performance degradation using
small data sets either. This is one of the reasons why I like to tail
the database log (or use &lt;a class="reference external" href="http://github.com/robhudson/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt; if I''m using Django)
to see the queries go by.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-list-comprehensions-when-a-single-value-is-needed"&gt;
&lt;h2&gt;Using List Comprehensions When a Single Value is Needed&lt;/h2&gt;
&lt;p&gt;To make this situation worse, the activeOrganizationProjectUsers list
wasn't actually used. This is a combination of a Python anti-pattern and
the ORM anti-pattern. What was required was to determine if a single
active organization user existed.&lt;/p&gt;
&lt;p&gt;I believe the original developer(s) used the list comprehension solution
in a combination of ignorance and syntactic sugar. They didn't want to
write a new function to do the query and put it in the User class so
they used the existing class's API. The syntactic sugar was using the
list comprehension to get more values than the one that was needed. If
this wasn't a (potentially) expensive ORM backed operation the original
code could have been:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
activeOrganizationProjectUsers = False
for x in project.users:
&amp;nbsp;&amp;nbsp;&amp;nbsp; if x.active and x.organization == organization:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; activeOrganizationProjectUsers = True
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break
if activeOrganizationProjectUsers:
&amp;nbsp;&amp;nbsp;&amp;nbsp; # do something
&lt;/pre&gt;
&lt;p&gt;But this solution could still query all possible user/organization
combinations. The other question would be: which set is larger the
organization users or the project users? It is likely looping over the
organization's users looking for active ones would be more efficient
anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remember-the-underlying-representation"&gt;
&lt;h2&gt;Remember the Underlying Representation&lt;/h2&gt;
&lt;p&gt;When performance matters remembering the objects are ORM backed is
important. So in this case a single query was all that was required
(SqlObject pseudo syntax):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
activeOrganizationProjectUsers = Users.selectBy(project=project,
                     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; active=True,
                     &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; organization=organization).count() &amp;gt; 0
&lt;/pre&gt;
&lt;p&gt;If abstracting out the ORM's methods is important this new function
could be added to the appropriate class as a method. In my case making a
change to use a query resulted in cutting the page load time by two
orders of magnitude.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="antipattern"></category><category term="development"></category><category term="orm"></category><category term="python"></category></entry><entry><title>YellowGrass - Web Based Issue Tracking</title><link href="http://tech.agilitynerd.com/yellowgrass-web-based-issue-tracking.html" rel="alternate"></link><updated>2011-06-07T12:24:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2011-06-07:yellowgrass-web-based-issue-tracking.html</id><summary type="html">&lt;p&gt;I was doing some reading on &lt;a class="reference external" href="http://www.mobl-lang.org/"&gt;mobl&lt;/a&gt;&amp;nbsp;and saw&amp;nbsp;that they&amp;nbsp;are using a free
web based service called &lt;a class="reference external" href="http://yellowgrass.org/features"&gt;YellowGrass&lt;/a&gt;&amp;nbsp;for issue tracking. It has some
nice features and seems easy to use.&amp;nbsp;Everything is tag based.&amp;nbsp;I think
I'll try to use it for tracking enhancements to &lt;a class="reference external" href="http://agilitycourses.com"&gt;agilitycourses.com&lt;/a&gt;.&lt;/p&gt;
</summary><category term="development"></category><category term="issuetracking"></category></entry><entry><title>How Safe is Your Personal Information in the Hands of Website Developers?</title><link href="http://tech.agilitynerd.com/how-safe-is-your-personal-information-in-the-1.html" rel="alternate"></link><updated>2005-06-23T19:00:00-05:00</updated><author><name>Steve Schwarz</name></author><id>tag:tech.agilitynerd.com,2005-06-23:how-safe-is-your-personal-information-in-the-1.html</id><summary type="html">&lt;p&gt;I was going through the webserver statistics for this site to see if any
new sites had linked to any of my articles (it is always nice to see
that what I have to say is useful to someone). Anyway, I ran across
someone who had come to my site through a Google query (I won't mention
what the query was for reasons you'll soon see). I ran the same query on
Google to see what else came up since it was a rather unique query.
Another Google link was for a site that looked like it had raw data -
not your usual HTML pages.&lt;/p&gt;
&lt;p&gt;When I went to the site I found what looked like a website developer's
development directory wide open to the internet. There were at least
three company's websites sitting in subdirectories. The file referred to
in the Google result page was a backup of an SQL database dump file. Not
just any database file - a backup of all the customer information for
running one site's shopping cart database. It included names, addresses,
email addresses, and phone numbers! (I didn't poke around to see if it
had any more sensitive data).&lt;/p&gt;
&lt;p&gt;I was able to figure out the original data owner's domain name from some
info in the header of the file. So I just sent them an email letting
them know that their customer information is posted for all to see on
someone else's website. It will be interesting to see if they respond. I
hope it is just their website developer who has a test server running
and accidentally left this SQL dump in a publicly accessible area of
their webserver. I'd hate to think this data was stolen from the real
website and being used for spamming purposes.&lt;/p&gt;
&lt;p&gt;As a software developer I've read numerous cautionary tales of
accidental (and malicious) data theft occurring when real customer data
is used in test systems. I just never imagined I'd stumble across such
an egregious privacy violation. So this experience makes me wonder about
all the online systems into which we type our personal information. All
it takes is one careless developer (not even a malicious one) to expose
our private information to a much wider audience...&lt;/p&gt;
</summary><category term="development"></category><category term="privacy"></category></entry></feed>